{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      // oldFillColor:undefined,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      console.log(commandObject); //  this.state.commandList.push(commandObject)\n\n      if (commandObject.execute()) {\n        this.state.commandList.push(commandObject);\n      }\n    };\n\n    this.undo = () => {\n      console.log(this.state.commandList);\n\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        console.log(commandObject);\n\n        if (commandObject != null) {\n          commandObject.undo();\n        }\n      }\n    };\n\n    this.redo = () => {\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        this.commandList.push(commandObject);\n        console.log(commandObject);\n\n        if (commandObject != null) {\n          commandObject.redo();\n        }\n      }\n\n      console.log(\"redo....\");\n    };\n\n    this.addShape = shapeData => {\n      let shapes = [...this.state.shapes];\n      let shapesMap = { ...this.state.shapesMap\n      };\n      const id = genId();\n      shapesMap[id] = { ...shapeData,\n        id\n      };\n      shapes.push(id);\n      this.setState({\n        shapes,\n        shapesMap,\n        selectedShapeId: id\n      });\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      this.setState({\n        currBorderColor: borderColor\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderColor\n        });\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      console.log(\"enter change fill color\");\n      console.log(this.state.selectedShapeId);\n      let oldColor = this.getCurrentObject().fillColor;\n      console.log(\"oldColor: \" + oldColor);\n      console.log(\"fillColor \" + fillColor); // if (this.state.selectedShapeId) {\n      //   this.updateShape(this.state.selectedShapeId, { fillColor });\n      // }\n\n      console.log(\"before creating the change fill color object\");\n      console.log(this.undoHandler);\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n      this.state.cur;\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    console.log(this.state);\n    console.log(this.state.currFillColor);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      currFillColor: this.state.currFillColor // oldFillColor: this.state.oldFillColor,\n      // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","currCommand","registerExecution","commandObject","console","log","execute","push","undo","length","pop","redo","addShape","shapeData","id","setState","updateShape","shapeId","newData","targetShape","moveShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","changeCurrBorderWidth","getCurrentObject","changeCurrFillColor","oldColor","undoHandler","cmdObject","cur","render","selectShape","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,eAArC;AAEA,OAAO,WAAP;AACA,OAAOC,4BAAP,MAAyC,sDAAzC;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAmB1BQ,EAAAA,WAAW,GAAG;AACZ;AADY,SAlBdC,KAkBc,GAlBN;AACN;AACAC,MAAAA,QAAQ,EAAEL,aAAa,CAACM,IAFlB;AAGNC,MAAAA,eAAe,EAAEP,aAAa,CAACQ,WAHzB;AAINC,MAAAA,eAAe,EAAET,aAAa,CAACU,WAJzB;AAKNC,MAAAA,aAAa,EAAEX,aAAa,CAACY,SALvB;AAMN;AAEA;AACAC,MAAAA,MAAM,EAAE,EATF;AAUNC,MAAAA,SAAS,EAAE,EAVL;AAWNC,MAAAA,eAAe,EAAEC,SAXX;AAaN;AACAC,MAAAA,WAAW,EAAE,EAdP;AAeNC,MAAAA,WAAW,EAAE,CAAC;AAfR,KAkBM;;AAAA,SAgCdC,iBAhCc,GAgCOC,aAAD,IAAmB;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EADsC,CAEvC;;AACE,UAAGA,aAAa,CAACG,OAAd,EAAH,EAA4B;AAC1B,aAAKnB,KAAL,CAAWa,WAAX,CAAuBO,IAAvB,CAA4BJ,aAA5B;AACD;AACF,KAtCa;;AAAA,SA6CdK,IA7Cc,GA6CP,MAAM;AACXJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWa,WAAvB;;AACA,UAAG,KAAKb,KAAL,CAAWa,WAAX,CAAuBS,MAAvB,KAAkC,CAArC,EAAwC;AACtC,YAAIN,aAAa,GAAG,KAAKhB,KAAL,CAAWa,WAAX,CAAuBU,GAAvB,EAApB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;;AACA,YAAGA,aAAa,IAAI,IAApB,EAA0B;AACxBA,UAAAA,aAAa,CAACK,IAAd;AACD;AACF;AACF,KAtDa;;AAAA,SA8DdG,IA9Dc,GA8DP,MAAM;AACX,UAAG,KAAKxB,KAAL,CAAWa,WAAX,CAAuBS,MAAvB,KAAkC,CAArC,EAAwC;AACtC,YAAIN,aAAa,GAAG,KAAKhB,KAAL,CAAWa,WAAX,CAAuBU,GAAvB,EAApB;AACA,aAAKV,WAAL,CAAiBO,IAAjB,CAAsBJ,aAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;;AACA,YAAGA,aAAa,IAAI,IAApB,EAA0B;AACxBA,UAAAA,aAAa,CAACQ,IAAd;AACD;AACF;;AACDP,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAxEa;;AAAA,SA2EdO,QA3Ec,GA2EFC,SAAD,IAAe;AACxB,UAAIjB,MAAM,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWS,MAAf,CAAb;AACA,UAAIC,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACA,YAAMiB,EAAE,GAAGhC,KAAK,EAAhB;AACAe,MAAAA,SAAS,CAACiB,EAAD,CAAT,GAAgB,EACd,GAAGD,SADW;AAEdC,QAAAA;AAFc,OAAhB;AAIAlB,MAAAA,MAAM,CAACW,IAAP,CAAYO,EAAZ;AACA,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBC,QAAAA,eAAe,EAAEgB;AAAtC,OAAd;AACD,KArFa;;AAAA,SAwFdE,WAxFc,GAwFA,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAClC,UAAIrB,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACA,UAAIsB,WAAW,GAAGtB,SAAS,CAACoB,OAAD,CAA3B;AACApB,MAAAA,SAAS,CAACoB,OAAD,CAAT,GAAqB,EAAE,GAAGE,WAAL;AAAkB,WAAGD;AAArB,OAArB;AACA,WAAKH,QAAL,CAAc;AAAElB,QAAAA;AAAF,OAAd;AACD,KA7Fa;;AAAA,SA+FduB,SA/Fc,GA+FDF,OAAD,IAAa;AACvB,UAAI,KAAK/B,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKkB,WAAL,CAAiB,KAAK7B,KAAL,CAAWW,eAA5B,EAA6CoB,OAA7C;AACD;AACF,KAnGa;;AAAA,SAsGdG,mBAtGc,GAsGQ,MAAM;AAC1B,UAAIxB,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACAA,MAAAA,SAAS,CAAC,KAAKV,KAAL,CAAWW,eAAZ,CAAT,CAAsCwB,OAAtC,GAAgD,KAAhD;AACA,WAAKP,QAAL,CAAc;AAAElB,QAAAA,SAAF;AAAaC,QAAAA,eAAe,EAAEC;AAA9B,OAAd;AACD,KA1Ga;;AAAA,SA4GdwB,cA5Gc,GA4GIlC,IAAD,IAAU;AACzB,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAK0B,QAAL,CAAc;AACZ3B,UAAAA,QAAQ,EAAEC,IADE;AAEZC,UAAAA,eAAe,EAAEP,aAAa,CAACQ;AAFnB,SAAd;AAID,OALD,MAKO;AACL,aAAKwB,QAAL,CAAc;AAAE3B,UAAAA,QAAQ,EAAEC;AAAZ,SAAd;AACD;AACF,KArHa;;AAAA,SAuHdmC,qBAvHc,GAuHWjC,WAAD,IAAiB;AACvC,WAAKwB,QAAL,CAAc;AAAEzB,QAAAA,eAAe,EAAEC;AAAnB,OAAd;;AACA,UAAI,KAAKJ,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKkB,WAAL,CAAiB,KAAK7B,KAAL,CAAWW,eAA5B,EAA6C;AAAEP,UAAAA;AAAF,SAA7C;AACD;AACF,KA5Ha;;AAAA,SA8HdkC,qBA9Hc,GA8HWhC,WAAD,IAAiB;AACvC,WAAKsB,QAAL,CAAc;AAAEvB,QAAAA,eAAe,EAAEC;AAAnB,OAAd;;AACA,UAAI,KAAKN,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKkB,WAAL,CAAiB,KAAK7B,KAAL,CAAWW,eAA5B,EAA6C;AAAEL,UAAAA;AAAF,SAA7C;AACD;AACF,KAnIa;;AAAA,SAqIdiC,gBArIc,GAqIK,MAAK;AACtB,UAAG,KAAKvC,KAAL,CAAWS,MAAX,CAAkBa,MAAlB,KAA6B,CAAhC,EAAmC;AACjC,YAAI,KAAKtB,KAAL,CAAWW,eAAf,EAAgC;AAC9B,iBAAO,KAAKX,KAAL,CAAWU,SAAX,CAAqB,KAAKV,KAAL,CAAWW,eAAhC,CAAP;AAAwD;AACzD;AACF;AACF,KA3Ia;;AAAA,SA6Id6B,mBA7Ic,GA6IShC,SAAD,IAAe;AACnCS,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWW,eAAvB;AACA,UAAI8B,QAAQ,GAAG,KAAKF,gBAAL,GAAwB/B,SAAvC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeuB,QAA3B;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeV,SAA3B,EALmC,CAMnC;AACA;AACA;;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKwB,WAAjB;AACA,UAAIC,SAAS,GAAG,IAAI9C,4BAAJ,CAAiC,KAAK6C,WAAtC,EAAmDD,QAAnD,EAA6DjC,SAA7D,EAAwE,KAAKR,KAAL,CAAWW,eAAnF,CAAhB;AACA,WAAKX,KAAL,CAAW4C,GAAX;;AACA,UAAGD,SAAS,CAACxB,OAAV,EAAH,EAAuB;AACrB,aAAKnB,KAAL,CAAWa,WAAX,CAAuBO,IAAvB,CAA4BuB,SAA5B;AACD;AACF,KA7Ja;;AAEZ1B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAjB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlB,KAAL,CAAWO,aAAvB;AAGA;;;;;AAIA,SAAKmC,WAAL,GAAmB;AAEjB3B,MAAAA,iBAAiB,EAAE,KAAKA,iBAFP;AAGjBM,MAAAA,IAAI,EAAE,KAAKA,IAHM;AAIjBQ,MAAAA,WAAW,EAAE,KAAKA,WAJD;AAKjBtB,MAAAA,aAAa,EAAE,KAAKP,KAAL,CAAWO,aALT,CAMjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbiB,KAAnB;AAeD;AAED;;;;;;;AAqIAsC,EAAAA,MAAM,GAAG;AAEP,UAAM;AACJ5C,MAAAA,QADI;AAEJE,MAAAA,eAFI;AAGJE,MAAAA,eAHI;AAIJE,MAAAA,aAJI;AAKJE,MAAAA,MALI;AAMJC,MAAAA,SANI;AAOJC,MAAAA;AAPI,QAQF,KAAKX,KART,CAFO,CAYP;AACA;;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,QADK;AAELmC,QAAAA,cAAc,EAAE,KAAKA,cAFhB;AAGLjC,QAAAA,eAHK;AAILkC,QAAAA,qBAAqB,EAAE,KAAKA,qBAJvB;AAKLhC,QAAAA,eALK;AAMLiC,QAAAA,qBAAqB,EAAE,KAAKA,qBANvB;AAOL/B,QAAAA,aAPK;AAQLiC,QAAAA,mBAAmB,EAAE,KAAKA,mBARrB;AAUL/B,QAAAA,MAVK;AAWLC,QAAAA,SAXK;AAYLe,QAAAA,QAAQ,EAAE,KAAKA,QAZV;AAaLQ,QAAAA,SAAS,EAAE,KAAKA,SAbX;AAcLtB,QAAAA,eAdK;AAeLmC,QAAAA,WAAW,EAAGnB,EAAD,IAAQ;AACnB,eAAKC,QAAL,CAAc;AAAEjB,YAAAA,eAAe,EAAEgB;AAAnB,WAAd;;AACA,cAAIA,EAAJ,EAAQ;AACN,kBAAM;AAAEvB,cAAAA,WAAF;AAAeE,cAAAA,WAAf;AAA4BE,cAAAA;AAA5B,gBAA0CE,SAAS,CACvDD,MAAM,CAACsC,MAAP,CAAejB,OAAD,IAAaA,OAAO,KAAKH,EAAvC,EAA2C,CAA3C,CADuD,CAAzD;AAGA,iBAAKC,QAAL,CAAc;AACZzB,cAAAA,eAAe,EAAEC,WADL;AAEZC,cAAAA,eAAe,EAAEC,WAFL;AAGZC,cAAAA,aAAa,EAAEC;AAHH,aAAd;AAKD;AACF,SA3BI;AA4BL0B,QAAAA,mBAAmB,EAAE,KAAKA,mBA5BrB;AA8BLb,QAAAA,IAAI,EAAE,KAAKA,IA9BN;AA+BLG,QAAAA,IAAI,EAAE,KAAKA;AA/BN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAmCE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,eAoCE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApCF,CADF,CADF;AA0CD;;AA3OyB;;AA8O5B,eAAe1B,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    // oldFillColor:undefined,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n    console.log(this.state)\n    console.log(this.state.currFillColor)\n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      currFillColor: this.state.currFillColor,\n      // oldFillColor: this.state.oldFillColor,\n      // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n   console.log(commandObject)\n  //  this.state.commandList.push(commandObject)\n    if(commandObject.execute()) {\n      this.state.commandList.push(commandObject)\n    }  \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(this.state.commandList)\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      console.log(commandObject)\n      if(commandObject != null) {\n        commandObject.undo()\n      } \n    } \n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      this.commandList.push(commandObject)\n      console.log(commandObject)\n      if(commandObject != null) {\n        commandObject.redo()\n      } \n    } \n    console.log(\"redo....\");\n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    let shapes = [...this.state.shapes];\n    let shapesMap = { ...this.state.shapesMap };\n    const id = genId();\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes, shapesMap, selectedShapeId: id });\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    this.setState({ currBorderColor: borderColor });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderColor });\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  }\n\n  changeCurrFillColor = (fillColor) => {\n    console.log(\"enter change fill color\")\n    console.log(this.state.selectedShapeId)\n    let oldColor = this.getCurrentObject().fillColor\n    console.log(\"oldColor: \" + oldColor)\n    console.log(\"fillColor \" + fillColor)\n    // if (this.state.selectedShapeId) {\n    //   this.updateShape(this.state.selectedShapeId, { fillColor });\n    // }\n    console.log(\"before creating the change fill color object\")\n    console.log(this.undoHandler)\n    let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n    this.state.cur\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n\n  render() {\n    \n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}