{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\"; // import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      finalBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      oldBorderWidth: defaultValues.borderWidth,\n      orginalMovePosition: {},\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      redoCommandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      console.log(commandObject); //  this.state.commandList.push(commandObject)\n\n      if (commandObject.execute()) {\n        this.state.commandList.push(commandObject);\n      }\n    };\n\n    this.undo = () => {\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        this.state.redoCommandList.push(commandObject);\n        this.state.currCommand = commandObject;\n\n        if (commandObject != null) {\n          commandObject.undo(); // let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n          // this.state.selectedShapeId = selectedShapeId\n        }\n      } else {// UndoRedo.greyUndo()\n        }\n    };\n\n    this.redo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        // UndoRedo.unGreyRedo()\n        var commandObject = this.state.redoCommandList.pop();\n        this.state.commandList.push(commandObject);\n        commandObject.redo(); // let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n        // this.state.selectedShapeId = selectedShapeId\n      } else {// UndoRedo.greyRedo()\n        }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.addShape = shapeData => {// let shapes = [...this.state.shapes];\n      // let shapesMap = { ...this.state.shapesMap };\n      // const id = genId();\n      // shapesMap[id] = {\n      //   ...shapeData,\n      //   id,\n      // };\n      // shapes.push(id);\n      // this.setState({ shapes, shapesMap, selectedShapeId: id });\n      // const id = genId();\n      // let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n      // if(cmdObject.execute()){\n      //   this.state.commandList.push(cmdObject)\n      // }\n      // console.log(this.state.shapesMap)\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      }); // let id = this.getCurrentObject().id\n      // console.log(id)\n      // let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes, id);\n      // if(cmdObject.execute()){\n      //   this.state.commandList.push(cmdObject)\n      // }\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      // console.log(newData)\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      let oldColor = this.getCurrentObject().borderColor;\n      let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getBorderWidthBeforeMove = widthBefore => {\n      this.state.oldBorderWidth = widthBefore;\n    };\n\n    this.getFinalBorderWidth = borderWidth => {\n      let oldWidth = this.state.oldBorderWidth;\n      let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.moveShapeDown = targetId => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[targetId];\n      let init = targetShape.initCoords;\n      let final = targetShape.finalCoords;\n      let origin = {\n        initCoords: init,\n        finalCoords: final\n      };\n      console.log(origin);\n      this.state.orginalMovePosition = origin;\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.moveShapeUp = newData => {\n      let cmdObject = new MoveCommandObject(this.undoHandler, this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      let oldColor = this.getCurrentObject().fillColor;\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.setState = this.setState.bind(this);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        getFinalBorderWidth: this.getFinalBorderWidth,\n        getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        moveShapeDown: this.moveShapeDown,\n        moveShapeUp: this.moveShapeUp,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderWidthCommandObject","ChangeBorderColorCommandObject","MoveCommandObject","CreateCommandObject","DeleteCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","finalBorderWidth","currFillColor","fillColor","oldBorderWidth","orginalMovePosition","shapes","shapesMap","selectedShapeId","undefined","commandList","redoCommandList","currCommand","registerExecution","commandObject","console","log","execute","push","undo","length","pop","redo","getCurrentObject","addShape","shapeData","deleteSelectedShape","visible","setState","updateShape","shapeId","newData","targetShape","changeCurrMode","changeCurrBorderColor","oldColor","cmdObject","undoHandler","changeCurrBorderWidth","getBorderWidthBeforeMove","widthBefore","getFinalBorderWidth","oldWidth","moveShapeDown","targetId","init","initCoords","final","finalCoords","origin","moveShape","moveShapeUp","changeCurrFillColor","bind","render","selectShape","id","filter"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n// import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    finalBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    oldBorderWidth: defaultValues.borderWidth,\n    orginalMovePosition: {},\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    redoCommandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n    this.setState = this.setState.bind(this); \n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n   console.log(commandObject)\n  //  this.state.commandList.push(commandObject)\n    if(commandObject.execute()) {\n      this.state.commandList.push(commandObject)\n    }  \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      this.state.redoCommandList.push(commandObject)\n      this.state.currCommand = commandObject\n\n      if(commandObject != null) {\n        commandObject.undo()\n        // let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n        // this.state.selectedShapeId = selectedShapeId\n      } \n\n    } else {\n      // UndoRedo.greyUndo()\n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    if(this.state.redoCommandList.length !== 0) {\n      // UndoRedo.unGreyRedo()\n      var commandObject = this.state.redoCommandList.pop()\n      this.state.commandList.push(commandObject)\n      commandObject.redo()\n      // let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n      // this.state.selectedShapeId = selectedShapeId\n    }else{\n      // UndoRedo.greyRedo()\n    }\n  };\n\n  //A helper function to get the current Object being selected. \n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    // let shapes = [...this.state.shapes];\n    // let shapesMap = { ...this.state.shapesMap };\n    // const id = genId();\n    // shapesMap[id] = {\n    //   ...shapeData,\n    //   id,\n    // };\n    // shapes.push(id);\n    // this.setState({ shapes, shapesMap, selectedShapeId: id });\n\n\n\n    // const id = genId();\n    // let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n    // if(cmdObject.execute()){\n    //   this.state.commandList.push(cmdObject)\n    // }\n    // console.log(this.state.shapesMap)\n  };\n\n   // deleting a shape sets its visibility to false, rather than removing it\n   deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n\n\n    // let id = this.getCurrentObject().id\n    // console.log(id)\n\n    // let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes, id);\n    // if(cmdObject.execute()){\n    //   this.state.commandList.push(cmdObject)\n    // }\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    // console.log(newData)\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  //Chnage the mode of the palette\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  //Change the selected object's border color\n  changeCurrBorderColor = (borderColor) => {\n    let oldColor = this.getCurrentObject().borderColor;\n    let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Set the border width of the selected object when moving the slider of border width\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  //Get the border width of the selected object before the slider is moved\n  getBorderWidthBeforeMove = (widthBefore) =>{\n    this.state.oldBorderWidth = widthBefore\n  }\n\n  //Get the border width of the selected object after mouse up from the slider\n  getFinalBorderWidth = (borderWidth) => {\n    let oldWidth = this.state.oldBorderWidth\n    let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Get the selected object's original position when mouse down on the object\n  moveShapeDown = (targetId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[targetId];\n    let init = targetShape.initCoords\n    let final = targetShape.finalCoords\n    let origin ={initCoords: init, finalCoords:final}\n    console.log(origin)\n    this.state.orginalMovePosition = origin\n  }\n\n  //Update the position of the selected object when the objected is being moved\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n  \n  //When moving a shape and the mouse up, trigger this event to create only one object in one movement\n  moveShapeUp = (newData) => {\n    let cmdObject = new MoveCommandObject(this.undoHandler,this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n\n  //Change the current fill color of the selected object\n  changeCurrFillColor = (fillColor) => {    \n    let oldColor = this.getCurrentObject().fillColor\n    let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            getFinalBorderWidth: this.getFinalBorderWidth,\n            getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            moveShapeDown: this.moveShapeDown,\n            moveShapeUp: this.moveShapeUp,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}