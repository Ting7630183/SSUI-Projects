{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class MoveCommandObject extends CommandObject {\n  constructor(undoHandler, newData, selectedShapeId) {\n    super(undoHandler, true);\n    this.oldValue = newData.initCoords;\n    this.newValue = newData.finalCoords;\n    this.selectedShapeId = selectedShapeId;\n    this.updateShape = undoHandler.updateShape;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    var newData = this.newValue;\n    this.updateShape(this.selectedShapeId, {\n      fillColor\n    });\n    console.log(this.addToUndoStack);\n    return true;\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    var fillColor = this.oldValue;\n    this.updateShape(this.selectedShapeId, {\n      fillColor\n    }); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    var fillColor = this.newValue;\n    this.updateShape(this.selectedShapeId, {\n      fillColor\n    }); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {//   return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {//   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/MoveCommandObject.js"],"names":["CommandObject","MoveCommandObject","constructor","undoHandler","newData","selectedShapeId","oldValue","initCoords","newValue","finalCoords","updateShape","execute","fillColor","console","log","addToUndoStack","undo","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,aAAhC,CAA8C;AACzDE,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAd,EAAuBC,eAAvB,EAAwC;AACjD,UAAMF,WAAN,EAAmB,IAAnB;AACA,SAAKG,QAAL,GAAgBF,OAAO,CAACG,UAAxB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACK,WAAxB;AACA,SAAKJ,eAAL,GAAuBA,eAAvB;AACA,SAAKK,WAAL,GAAmBP,WAAW,CAACO,WAA/B;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AACN,QAAIP,OAAO,GAAG,KAAKI,QAAnB;AACA,SAAKE,WAAL,CAAiB,KAAKL,eAAtB,EAAuC;AAACO,MAAAA;AAAD,KAAvC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,cAAjB;AACA,WAAO,IAAP;AACH;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACH,QAAIJ,SAAS,GAAG,KAAKN,QAArB;AACA,SAAKI,WAAL,CAAiB,KAAKL,eAAtB,EAAuC;AAACO,MAAAA;AAAD,KAAvC,EAFG,CAIL;AACD;AAED;;;;;;;AAKAK,EAAAA,IAAI,GAAG;AACH,QAAIL,SAAS,GAAG,KAAKJ,QAArB;AACA,SAAKE,WAAL,CAAiB,KAAKL,eAAtB,EAAuC;AAACO,MAAAA;AAAD,KAAvC,EAFG,CAGL;AACD;AAED;;;;;AAGAM,EAAAA,SAAS,GAAG,CACZ;AACC;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAG,CACT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;;AA9DwD","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class MoveCommandObject extends CommandObject {\n    constructor(undoHandler, newData, selectedShapeId) {\n      super(undoHandler, true);\n      this.oldValue = newData.initCoords\n      this.newValue = newData.finalCoords\n      this.selectedShapeId = selectedShapeId\n      this.updateShape = undoHandler.updateShape;\n    }\n  \n    /* override to execute the action of this command.\n     * pass in false for addToUndoStack if this is a command which is NOT\n     * put on the undo stack, like Copy, or a change of selection or Save\n     */\n    execute() {\n        var newData = this.newValue\n        this.updateShape(this.selectedShapeId, {fillColor})\n        console.log(this.addToUndoStack)\n        return true; \n    }\n  \n    /* override to undo the operation of this command\n     */\n    undo() {\n        var fillColor = this.oldValue\n        this.updateShape(this.selectedShapeId, {fillColor})\n        \n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to redo the operation of this command, which means to\n     * undo the undo. This should ONLY be called if the immediate\n     * previous operation was an Undo of this command. Anything that\n     * can be undone can be redone, so there is no need for a canRedo.\n     */\n    redo() {\n        var fillColor = this.newValue\n        this.updateShape(this.selectedShapeId, {fillColor})\n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to return true if this operation can be repeated in the\n     * current context\n     */\n    canRepeat() {\n    //   return selectedObj !== null;\n    }\n  \n    /* override to execute the operation again, this time possibly on\n     * a new object. Thus, this typically uses the same value but a new\n     * selectedObject.\n     */\n    repeat() {\n    //   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n  \n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}