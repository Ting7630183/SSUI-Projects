{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      finalBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      oldBorderWidth: defaultValues.borderWidth,\n      orginalMovePosition: {},\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      redoCommandList: [],\n      currCommand: -1,\n      undoButton: false,\n      redoButton: false\n    };\n\n    this.undo = () => {\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        this.state.redoCommandList.push(commandObject);\n        this.state.currCommand = commandObject;\n\n        if (commandObject != null) {\n          commandObject.undo();\n          let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n          this.state.selectedShapeId = selectedShapeId;\n        }\n\n        if (this.state.commandList.length === 0) {\n          this.state.undoButton = true;\n        }\n\n        this.ungrayRedo();\n        console.log(this.state.commandList);\n      }\n    };\n\n    this.redo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        var commandObject = this.state.redoCommandList.pop();\n        this.state.commandList.push(commandObject);\n        commandObject.redo();\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n        this.state.selectedShapeId = selectedShapeId;\n        this.ungrayUndo();\n\n        if (this.state.redoCommandList.length === 0) {\n          this.state.redoButton = true;\n        }\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.ungrayUndo = () => {\n      if (this.state.commandList.length !== 0) {\n        this.state.undoButton = false;\n      }\n    };\n\n    this.ungrayRedo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        this.state.redoButton = false;\n      }\n    };\n\n    this.setModeToSelect = () => {\n      this.state.currMode = \"select\";\n    };\n\n    this.cleanRedoStack = () => {\n      this.state.redoCommandList = [];\n    };\n\n    this.addShape = shapeData => {\n      const id = genId();\n      let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n\n      this.ungrayUndo();\n    };\n\n    this.deleteHelper = id => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[id].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.undoDeleteHelper = id => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[id].visible = true;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.deleteSelectedShape = () => {\n      let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n\n      this.ungrayUndo();\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n      this.ungrayUndo();\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      if (this.state.mode === \"select\") {\n        let oldColor = this.getCurrentObject().borderColor;\n        let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n\n        if (cmdObject.execute()) {\n          this.state.commandList.push(cmdObject);\n        }\n\n        this.ungrayUndo();\n      } else {\n        this.setState({\n          currBorderColor: borderColor\n        });\n\n        if (this.state.selectedShapeId) {\n          this.updateShape(this.state.selectedShapeId, {\n            borderColor\n          });\n        }\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getBorderWidthBeforeMove = widthBefore => {\n      this.state.oldBorderWidth = widthBefore;\n    };\n\n    this.getFinalBorderWidth = borderWidth => {\n      let oldWidth = this.state.oldBorderWidth;\n      let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n\n      this.ungrayUndo();\n    };\n\n    this.moveShapeDown = targetId => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[targetId];\n      let init = targetShape.initCoords;\n      let final = targetShape.finalCoords;\n      let origin = {\n        initCoords: init,\n        finalCoords: final\n      };\n      this.state.orginalMovePosition = origin;\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.moveShapeUp = newData => {\n      console.log(\"enter move command\");\n      let cmdObject = new MoveCommandObject(this.undoHandler, this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n\n      this.ungrayUndo();\n      console.log(this.state.commandList);\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      if (this.state.mode === \"select\") {\n        let oldColor = this.getCurrentObject().fillColor;\n        let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n\n        if (cmdObject.execute()) {\n          this.state.commandList.push(cmdObject);\n        }\n\n        this.ungrayUndo();\n        console.log(this.state.redoCommandList);\n      } else {\n        this.setState({\n          currFillColor: fillColor\n        });\n\n        if (this.state.selectedShapeId) {\n          this.updateShape(this.state.selectedShapeId, {\n            fillColor\n          });\n        }\n      }\n    };\n\n    this.setState = this.setState.bind(this);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      deleteHelper: this.deleteHelper,\n      undoDeleteHelper: this.undoDeleteHelper,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      setModeToSelect: this.setModeToSelect,\n      cleanRedoStack: this.cleanRedoStack\n    };\n  } //Implement undo to undo previous operation\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoButton,\n      redoButton\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        getFinalBorderWidth: this.getFinalBorderWidth,\n        getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        moveShapeDown: this.moveShapeDown,\n        moveShapeUp: this.moveShapeUp,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo,\n        undoButton,\n        redoButton\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderWidthCommandObject","ChangeBorderColorCommandObject","MoveCommandObject","CreateCommandObject","DeleteCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","finalBorderWidth","currFillColor","fillColor","oldBorderWidth","orginalMovePosition","shapes","shapesMap","selectedShapeId","undefined","commandList","redoCommandList","currCommand","undoButton","redoButton","undo","length","commandObject","pop","push","getCurrentSelectedShapeId","ungrayRedo","console","log","redo","ungrayUndo","getCurrentObject","setModeToSelect","cleanRedoStack","addShape","shapeData","id","cmdObject","undoHandler","execute","deleteHelper","visible","setState","undoDeleteHelper","deleteSelectedShape","updateShape","shapeId","newData","targetShape","changeCurrMode","changeCurrBorderColor","oldColor","changeCurrBorderWidth","getBorderWidthBeforeMove","widthBefore","getFinalBorderWidth","oldWidth","moveShapeDown","targetId","init","initCoords","final","finalCoords","origin","moveShape","moveShapeUp","changeCurrFillColor","bind","registerExecution","render","selectShape","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,eAArC;AAEA,OAAO,WAAP;AACA,OAAOC,4BAAP,MAAyC,sDAAzC;AACA,OAAOC,8BAAP,MAA2C,wDAA3C;AACA,OAAOC,8BAAP,MAA2C,wDAA3C;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;;AAEA,MAAMC,GAAN,SAAkBZ,SAAlB,CAA4B;AAwB1Ba,EAAAA,WAAW,GAAG;AACZ;AADY,SAvBdC,KAuBc,GAvBN;AACN;AACAC,MAAAA,QAAQ,EAAEV,aAAa,CAACW,IAFlB;AAGNC,MAAAA,eAAe,EAAEZ,aAAa,CAACa,WAHzB;AAINC,MAAAA,eAAe,EAAEd,aAAa,CAACe,WAJzB;AAKNC,MAAAA,gBAAgB,EAAEhB,aAAa,CAACe,WAL1B;AAMNE,MAAAA,aAAa,EAAEjB,aAAa,CAACkB,SANvB;AAONC,MAAAA,cAAc,EAAEnB,aAAa,CAACe,WAPxB;AAQNK,MAAAA,mBAAmB,EAAE,EARf;AAUN;AACAC,MAAAA,MAAM,EAAE,EAXF;AAYNC,MAAAA,SAAS,EAAE,EAZL;AAaNC,MAAAA,eAAe,EAAEC,SAbX;AAeN;AACAC,MAAAA,WAAW,EAAE,EAhBP;AAiBNC,MAAAA,eAAe,EAAE,EAjBX;AAkBNC,MAAAA,WAAW,EAAE,CAAC,CAlBR;AAmBNC,MAAAA,UAAU,EAAE,KAnBN;AAoBNC,MAAAA,UAAU,EAAC;AApBL,KAuBM;;AAAA,SAsBdC,IAtBc,GAsBP,MAAM;AACX,UAAG,KAAKrB,KAAL,CAAWgB,WAAX,CAAuBM,MAAvB,KAAkC,CAArC,EAAwC;AACtC,YAAIC,aAAa,GAAG,KAAKvB,KAAL,CAAWgB,WAAX,CAAuBQ,GAAvB,EAApB;AAEA,aAAKxB,KAAL,CAAWiB,eAAX,CAA2BQ,IAA3B,CAAgCF,aAAhC;AACA,aAAKvB,KAAL,CAAWkB,WAAX,GAAyBK,aAAzB;;AAEA,YAAGA,aAAa,IAAI,IAApB,EAA0B;AACxBA,UAAAA,aAAa,CAACF,IAAd;AACA,cAAIP,eAAe,GAAGS,aAAa,CAACG,yBAAd,EAAtB;AACA,eAAK1B,KAAL,CAAWc,eAAX,GAA6BA,eAA7B;AACD;;AAED,YAAG,KAAKd,KAAL,CAAWgB,WAAX,CAAuBM,MAAvB,KAAkC,CAArC,EAAwC;AACtC,eAAKtB,KAAL,CAAWmB,UAAX,GAAwB,IAAxB;AACD;;AACD,aAAKQ,UAAL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWgB,WAAvB;AAED;AACF,KA1Ca;;AAAA,SA6Cdc,IA7Cc,GA6CP,MAAM;AACX,UAAG,KAAK9B,KAAL,CAAWiB,eAAX,CAA2BK,MAA3B,KAAsC,CAAzC,EAA4C;AAC1C,YAAIC,aAAa,GAAG,KAAKvB,KAAL,CAAWiB,eAAX,CAA2BO,GAA3B,EAApB;AACA,aAAKxB,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4BF,aAA5B;AACAA,QAAAA,aAAa,CAACO,IAAd;AACA,YAAIhB,eAAe,GAAGS,aAAa,CAACG,yBAAd,EAAtB;AACA,aAAK1B,KAAL,CAAWc,eAAX,GAA6BA,eAA7B;AACA,aAAKiB,UAAL;;AACA,YAAG,KAAK/B,KAAL,CAAWiB,eAAX,CAA2BK,MAA3B,KAAsC,CAAzC,EAA4C;AAC1C,eAAKtB,KAAL,CAAWoB,UAAX,GAAwB,IAAxB;AACD;AACF;AACF,KAzDa;;AAAA,SA4DdY,gBA5Dc,GA4DK,MAAK;AACtB,UAAG,KAAKhC,KAAL,CAAWY,MAAX,CAAkBU,MAAlB,KAA6B,CAAhC,EAAmC;AACjC,YAAI,KAAKtB,KAAL,CAAWc,eAAf,EAAgC;AAC9B,iBAAO,KAAKd,KAAL,CAAWa,SAAX,CAAqB,KAAKb,KAAL,CAAWc,eAAhC,CAAP;AAAwD;AACzD;AACF;AACF,KAlEa;;AAAA,SAqEdiB,UArEc,GAqED,MAAM;AACjB,UAAG,KAAK/B,KAAL,CAAWgB,WAAX,CAAuBM,MAAvB,KAAkC,CAArC,EAAwC;AACtC,aAAKtB,KAAL,CAAWmB,UAAX,GAAwB,KAAxB;AACD;AACF,KAzEa;;AAAA,SA4EdQ,UA5Ec,GA4ED,MAAK;AAChB,UAAG,KAAK3B,KAAL,CAAWiB,eAAX,CAA2BK,MAA3B,KAAsC,CAAzC,EAA4C;AAC1C,aAAKtB,KAAL,CAAWoB,UAAX,GAAwB,KAAxB;AACD;AACF,KAhFa;;AAAA,SAkFda,eAlFc,GAkFI,MAAK;AACrB,WAAKjC,KAAL,CAAWC,QAAX,GAAsB,QAAtB;AACD,KApFa;;AAAA,SAsFdiC,cAtFc,GAsFG,MAAK;AACpB,WAAKlC,KAAL,CAAWiB,eAAX,GAA6B,EAA7B;AACD,KAxFa;;AAAA,SA2FdkB,QA3Fc,GA2FFC,SAAD,IAAe;AACxB,YAAMC,EAAE,GAAG/C,KAAK,EAAhB;AACA,UAAIgD,SAAS,GAAG,IAAI1C,mBAAJ,CAAwB,KAAK2C,WAA7B,EAA0CH,SAA1C,EAAqD,KAAKpC,KAAL,CAAWY,MAAhE,EAAwE,KAAKZ,KAAL,CAAWa,SAAnF,EAA8FwB,EAA9F,CAAhB;;AACA,UAAGC,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,aAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,WAAKP,UAAL;AACD,KAlGa;;AAAA,SAqGdU,YArGc,GAqGEJ,EAAD,IAAQ;AACrB,UAAIxB,SAAS,GAAG,EAAE,GAAG,KAAKb,KAAL,CAAWa;AAAhB,OAAhB;AACAA,MAAAA,SAAS,CAACwB,EAAD,CAAT,CAAcK,OAAd,GAAwB,KAAxB;AACA,WAAKC,QAAL,CAAc;AAAE9B,QAAAA,SAAF;AAAaC,QAAAA,eAAe,EAAEC;AAA9B,OAAd;AACD,KAzGa;;AAAA,SA4Gd6B,gBA5Gc,GA4GMP,EAAD,IAAQ;AACzB,UAAIxB,SAAS,GAAG,EAAE,GAAG,KAAKb,KAAL,CAAWa;AAAhB,OAAhB;AACAA,MAAAA,SAAS,CAACwB,EAAD,CAAT,CAAcK,OAAd,GAAwB,IAAxB;AACA,WAAKC,QAAL,CAAc;AAAE9B,QAAAA,SAAF;AAAaC,QAAAA,eAAe,EAAEC;AAA9B,OAAd;AACD,KAhHa;;AAAA,SAmHb8B,mBAnHa,GAmHS,MAAM;AAC3B,UAAIP,SAAS,GAAG,IAAIzC,mBAAJ,CAAwB,KAAK0C,WAA7B,EAA0C,KAAKvC,KAAL,CAAWa,SAArD,EAAgE,KAAKb,KAAL,CAAWc,eAA3E,EAA4F,KAAKd,KAAL,CAAWY,MAAvG,CAAhB;;AACA,UAAG0B,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,aAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,WAAKP,UAAL;AACD,KAzHa;;AAAA,SA4Hde,WA5Hc,GA4HA,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAClC,UAAInC,SAAS,GAAG,EAAE,GAAG,KAAKb,KAAL,CAAWa;AAAhB,OAAhB;AACA,UAAIoC,WAAW,GAAGpC,SAAS,CAACkC,OAAD,CAA3B;AACAlC,MAAAA,SAAS,CAACkC,OAAD,CAAT,GAAqB,EAAE,GAAGE,WAAL;AAAkB,WAAGD;AAArB,OAArB;AACA,WAAKL,QAAL,CAAc;AAAE9B,QAAAA;AAAF,OAAd;AACA,WAAKkB,UAAL;AACD,KAlIa;;AAAA,SAqIdmB,cArIc,GAqIIhD,IAAD,IAAU;AACzB,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAKyC,QAAL,CAAc;AACZ1C,UAAAA,QAAQ,EAAEC,IADE;AAEZC,UAAAA,eAAe,EAAEZ,aAAa,CAACa;AAFnB,SAAd;AAID,OALD,MAKO;AACL,aAAKuC,QAAL,CAAc;AAAE1C,UAAAA,QAAQ,EAAEC;AAAZ,SAAd;AACD;AACF,KA9Ia;;AAAA,SAiJdiD,qBAjJc,GAiJW/C,WAAD,IAAiB;AACvC,UAAG,KAAKJ,KAAL,CAAWE,IAAX,KAAoB,QAAvB,EAAiC;AAC/B,YAAIkD,QAAQ,GAAG,KAAKpB,gBAAL,GAAwB5B,WAAvC;AACA,YAAIkC,SAAS,GAAG,IAAI5C,8BAAJ,CAAmC,KAAK6C,WAAxC,EAAqDa,QAArD,EAA+DhD,WAA/D,EAA4E,KAAKJ,KAAL,CAAWc,eAAvF,CAAhB;;AACA,YAAGwB,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,eAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,aAAKP,UAAL;AACD,OAPD,MAOM;AACJ,aAAKY,QAAL,CAAc;AAAExC,UAAAA,eAAe,EAAEC;AAAnB,SAAd;;AACA,YAAI,KAAKJ,KAAL,CAAWc,eAAf,EAAgC;AAC/B,eAAKgC,WAAL,CAAiB,KAAK9C,KAAL,CAAWc,eAA5B,EAA6C;AAAEV,YAAAA;AAAF,WAA7C;AACA;AACF;AACF,KA/Ja;;AAAA,SAkKdiD,qBAlKc,GAkKW/C,WAAD,IAAiB;AACvC,WAAKqC,QAAL,CAAc;AAAEtC,QAAAA,eAAe,EAAEC;AAAnB,OAAd;;AACA,UAAI,KAAKN,KAAL,CAAWc,eAAf,EAAgC;AAC9B,aAAKgC,WAAL,CAAiB,KAAK9C,KAAL,CAAWc,eAA5B,EAA6C;AAAER,UAAAA;AAAF,SAA7C;AACD;AACF,KAvKa;;AAAA,SA0KdgD,wBA1Kc,GA0KcC,WAAD,IAAgB;AACzC,WAAKvD,KAAL,CAAWU,cAAX,GAA4B6C,WAA5B;AACD,KA5Ka;;AAAA,SA+KdC,mBA/Kc,GA+KSlD,WAAD,IAAiB;AACrC,UAAImD,QAAQ,GAAG,KAAKzD,KAAL,CAAWU,cAA1B;AACA,UAAI4B,SAAS,GAAG,IAAI7C,8BAAJ,CAAmC,KAAK8C,WAAxC,EAAqDkB,QAArD,EAA+DnD,WAA/D,EAA4E,KAAKN,KAAL,CAAWc,eAAvF,CAAhB;;AACA,UAAGwB,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,aAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,WAAKP,UAAL;AACD,KAtLa;;AAAA,SAyLd2B,aAzLc,GAyLGC,QAAD,IAAc;AAC5B,UAAI9C,SAAS,GAAG,EAAE,GAAG,KAAKb,KAAL,CAAWa;AAAhB,OAAhB;AACA,UAAIoC,WAAW,GAAGpC,SAAS,CAAC8C,QAAD,CAA3B;AACA,UAAIC,IAAI,GAAGX,WAAW,CAACY,UAAvB;AACA,UAAIC,KAAK,GAAGb,WAAW,CAACc,WAAxB;AACA,UAAIC,MAAM,GAAE;AAACH,QAAAA,UAAU,EAAED,IAAb;AAAmBG,QAAAA,WAAW,EAACD;AAA/B,OAAZ;AACA,WAAK9D,KAAL,CAAWW,mBAAX,GAAiCqD,MAAjC;AACD,KAhMa;;AAAA,SAmMdC,SAnMc,GAmMDjB,OAAD,IAAa;AACvB,UAAI,KAAKhD,KAAL,CAAWc,eAAf,EAAgC;AAC9B,aAAKgC,WAAL,CAAiB,KAAK9C,KAAL,CAAWc,eAA5B,EAA6CkC,OAA7C;AACD;AACF,KAvMa;;AAAA,SA0MdkB,WA1Mc,GA0MClB,OAAD,IAAa;AACzBpB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,UAAIS,SAAS,GAAG,IAAI3C,iBAAJ,CAAsB,KAAK4C,WAA3B,EAAuC,KAAKvC,KAAL,CAAWW,mBAAlD,EAAuEqC,OAAvE,EAAgF,KAAKhD,KAAL,CAAWc,eAA3F,CAAhB;;AACA,UAAGwB,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,aAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,WAAKP,UAAL;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWgB,WAAvB;AACD,KAlNa;;AAAA,SAqNdmD,mBArNc,GAqNS1D,SAAD,IAAe;AACnC,UAAG,KAAKT,KAAL,CAAWE,IAAX,KAAoB,QAAvB,EAAiC;AAC/B,YAAIkD,QAAQ,GAAG,KAAKpB,gBAAL,GAAwBvB,SAAvC;AACA,YAAI6B,SAAS,GAAG,IAAI9C,4BAAJ,CAAiC,KAAK+C,WAAtC,EAAmDa,QAAnD,EAA6D3C,SAA7D,EAAwE,KAAKT,KAAL,CAAWc,eAAnF,CAAhB;;AACA,YAAGwB,SAAS,CAACE,OAAV,EAAH,EAAuB;AACrB,eAAKxC,KAAL,CAAWgB,WAAX,CAAuBS,IAAvB,CAA4Ba,SAA5B;AACD;;AACD,aAAKP,UAAL;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWiB,eAAvB;AAED,OATD,MASO;AACL,aAAK0B,QAAL,CAAc;AAAEnC,UAAAA,aAAa,EAAEC;AAAjB,SAAd;;AACA,YAAI,KAAKT,KAAL,CAAWc,eAAf,EAAgC;AAC9B,eAAKgC,WAAL,CAAiB,KAAK9C,KAAL,CAAWc,eAA5B,EAA6C;AAAEL,YAAAA;AAAF,WAA7C;AACD;AACF;AACF,KArOa;;AAEZ,SAAKkC,QAAL,GAAgB,KAAKA,QAAL,CAAcyB,IAAd,CAAmB,IAAnB,CAAhB;AAGA;;;;;AAIA,SAAK7B,WAAL,GAAmB;AACjB8B,MAAAA,iBAAiB,EAAE,KAAKA,iBADP;AAEjBvB,MAAAA,WAAW,EAAE,KAAKA,WAFD;AAGjBL,MAAAA,YAAY,EAAE,KAAKA,YAHF;AAIjBG,MAAAA,gBAAgB,EAAE,KAAKA,gBAJN;AAKjBD,MAAAA,QAAQ,EAAE,KAAKA,QALE;AAMjBnC,MAAAA,aAAa,EAAE,KAAKR,KAAL,CAAWQ,aANT;AAOjByB,MAAAA,eAAe,EAAE,KAAKA,eAPL;AAQjBC,MAAAA,cAAc,EAAE,KAAKA;AARJ,KAAnB;AAUD,GA3CyB,CA6C1B;;;AAoNAoC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJrE,MAAAA,QADI;AAEJE,MAAAA,eAFI;AAGJE,MAAAA,eAHI;AAIJG,MAAAA,aAJI;AAKJI,MAAAA,MALI;AAMJC,MAAAA,SANI;AAOJC,MAAAA,eAPI;AAQJK,MAAAA,UARI;AASJC,MAAAA;AATI,QAUF,KAAKpB,KAVT,CADO,CAaP;AACA;;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,QADK;AAELiD,QAAAA,cAAc,EAAE,KAAKA,cAFhB;AAGL/C,QAAAA,eAHK;AAILgD,QAAAA,qBAAqB,EAAE,KAAKA,qBAJvB;AAKL9C,QAAAA,eALK;AAMLgD,QAAAA,qBAAqB,EAAE,KAAKA,qBANvB;AAOLG,QAAAA,mBAAmB,EAAE,KAAKA,mBAPrB;AAQLF,QAAAA,wBAAwB,EAAE,KAAKA,wBAR1B;AASL9C,QAAAA,aATK;AAUL2D,QAAAA,mBAAmB,EAAE,KAAKA,mBAVrB;AAYLvD,QAAAA,MAZK;AAaLC,QAAAA,SAbK;AAcLsB,QAAAA,QAAQ,EAAE,KAAKA,QAdV;AAeL8B,QAAAA,SAAS,EAAE,KAAKA,SAfX;AAgBLP,QAAAA,aAAa,EAAE,KAAKA,aAhBf;AAiBLQ,QAAAA,WAAW,EAAE,KAAKA,WAjBb;AAkBLpD,QAAAA,eAlBK;AAmBLyD,QAAAA,WAAW,EAAGlC,EAAD,IAAQ;AACnB,eAAKM,QAAL,CAAc;AAAE7B,YAAAA,eAAe,EAAEuB;AAAnB,WAAd;;AACA,cAAIA,EAAJ,EAAQ;AACN,kBAAM;AAAEjC,cAAAA,WAAF;AAAeE,cAAAA,WAAf;AAA4BG,cAAAA;AAA5B,gBAA0CI,SAAS,CACvDD,MAAM,CAAC4D,MAAP,CAAezB,OAAD,IAAaA,OAAO,KAAKV,EAAvC,EAA2C,CAA3C,CADuD,CAAzD;AAGA,iBAAKM,QAAL,CAAc;AACZxC,cAAAA,eAAe,EAAEC,WADL;AAEZC,cAAAA,eAAe,EAAEC,WAFL;AAGZE,cAAAA,aAAa,EAAEC;AAHH,aAAd;AAKD;AACF,SA/BI;AAgCLoC,QAAAA,mBAAmB,EAAE,KAAKA,mBAhCrB;AAkCLxB,QAAAA,IAAI,EAAE,KAAKA,IAlCN;AAmCLS,QAAAA,IAAI,EAAE,KAAKA,IAnCN;AAoCLX,QAAAA,UApCK;AAqCLC,QAAAA;AArCK,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAyCE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzCF,eA0CE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CF,CADF,CADF;AAgDD;;AAhUyB;;AAmU5B,eAAetB,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    finalBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    oldBorderWidth: defaultValues.borderWidth,\n    orginalMovePosition: {},\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    redoCommandList: [],\n    currCommand: -1,\n    undoButton: false,\n    redoButton:false,\n  };\n\n  constructor() {\n    super();\n    this.setState = this.setState.bind(this); \n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      deleteHelper: this.deleteHelper,\n      undoDeleteHelper: this.undoDeleteHelper,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      setModeToSelect: this.setModeToSelect,\n      cleanRedoStack: this.cleanRedoStack,\n    };\n  }\n \n  //Implement undo to undo previous operation\n  undo = () => {\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      \n      this.state.redoCommandList.push(commandObject)\n      this.state.currCommand = commandObject\n\n      if(commandObject != null) {\n        commandObject.undo()\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n        this.state.selectedShapeId = selectedShapeId\n      } \n\n      if(this.state.commandList.length === 0) {\n        this.state.undoButton = true\n      }\n      this.ungrayRedo()\n      console.log(this.state.commandList)\n\n    } \n  };\n\n  //Implement redo to redo previous undo\n  redo = () => {\n    if(this.state.redoCommandList.length !== 0) {\n      var commandObject = this.state.redoCommandList.pop()\n      this.state.commandList.push(commandObject)\n      commandObject.redo()\n      let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n      this.state.selectedShapeId = selectedShapeId\n      this.ungrayUndo()\n      if(this.state.redoCommandList.length === 0) {\n        this.state.redoButton = true\n      }\n    }\n  };\n\n  //A helper function to get the current Object being selected. \n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  };\n\n  //A helper function to grey out the undo button\n  ungrayUndo = () => {\n    if(this.state.commandList.length !== 0) {\n      this.state.undoButton = false\n    }\n  }\n\n  //A helper function to grey out the redo button\n  ungrayRedo = () =>{\n    if(this.state.redoCommandList.length !== 0) {\n      this.state.redoButton = false\n    }\n  }\n\n  setModeToSelect = () =>{\n    this.state.currMode = \"select\"\n  }\n\n  cleanRedoStack = () =>{\n    this.state.redoCommandList = []\n  }\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    const id = genId();\n    let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n    this.ungrayUndo()\n  };\n\n  //A helper function to reverse create, that is to make the created object become invisible.\n  deleteHelper = (id) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[id].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  }\n\n  //A helper function to reverse delete of a create object, that is to make the created object visible again.\n  undoDeleteHelper = (id) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[id].visible = true;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  }\n\n   // deleting a shape sets its visibility to false, rather than removing it\n   deleteSelectedShape = () => {  \n    let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n    this.ungrayUndo()\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n    this.ungrayUndo()\n  };\n\n  //Chnage the mode of the palette\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  //Change the selected object's border color\n  changeCurrBorderColor = (borderColor) => {\n    if(this.state.mode === \"select\") {\n      let oldColor = this.getCurrentObject().borderColor;\n      let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n      if(cmdObject.execute()){\n        this.state.commandList.push(cmdObject)\n      }\n      this.ungrayUndo()\n    } else{\n      this.setState({ currBorderColor: borderColor });\n      if (this.state.selectedShapeId) {\n       this.updateShape(this.state.selectedShapeId, { borderColor });\n      }\n    }\n  };\n\n  //Set the border width of the selected object when moving the slider of border width\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  //Get the border width of the selected object before the slider is moved\n  getBorderWidthBeforeMove = (widthBefore) =>{\n    this.state.oldBorderWidth = widthBefore\n  }\n\n  //Get the border width of the selected object after mouse up from the slider\n  getFinalBorderWidth = (borderWidth) => {\n    let oldWidth = this.state.oldBorderWidth\n    let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n    this.ungrayUndo()\n  };\n\n  //Get the selected object's original position when mouse down on the object\n  moveShapeDown = (targetId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[targetId];\n    let init = targetShape.initCoords\n    let final = targetShape.finalCoords\n    let origin ={initCoords: init, finalCoords:final}\n    this.state.orginalMovePosition = origin\n  }\n\n  //Update the position of the selected object when the objected is being moved\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n  \n  //When moving a shape and the mouse up, trigger this event to create only one object in one movement\n  moveShapeUp = (newData) => {\n    console.log(\"enter move command\")\n    let cmdObject = new MoveCommandObject(this.undoHandler,this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n    this.ungrayUndo()\n    console.log(this.state.commandList)\n  };\n\n  //Change the current fill color of the selected object\n  changeCurrFillColor = (fillColor) => {   \n    if(this.state.mode === \"select\") {\n      let oldColor = this.getCurrentObject().fillColor\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n      if(cmdObject.execute()){\n        this.state.commandList.push(cmdObject)\n      }\n      this.ungrayUndo()\n      console.log(this.state.redoCommandList)\n\n    } else {\n      this.setState({ currFillColor: fillColor });\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, { fillColor });\n      }\n    }\n  };\n\n  \n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoButton,\n      redoButton,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            getFinalBorderWidth: this.getFinalBorderWidth,\n            getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            moveShapeDown: this.moveShapeDown,\n            moveShapeUp: this.moveShapeUp,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n            undoButton,\n            redoButton\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}