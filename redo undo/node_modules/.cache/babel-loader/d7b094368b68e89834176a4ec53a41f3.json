{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class CreateCommandObject extends CommandObject {\n  constructor(undoHandler) {\n    super(undoHandler, true);\n  }\n  /* override to execute the action of this command.\n  * pass in false for addToUndoStack if this is a command which is NOT\n  * put on the undo stack, like Copy, or a change of selection or Save\n  */\n\n\n  execute(selectedObj) {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // global variable for selected\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/CreateCommandObject.js"],"names":["CommandObject","CreateCommandObject","constructor","undoHandler","execute","selectedObj","targetObject","oldValue","fillColor","newValue","fillColorWidget","currentColor","addToUndoStack","registerExecution"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,mBAAN,SAAkCD,aAAlC,CAAgD;AAC3DE,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,UAAMA,WAAN,EAAmB,IAAnB;AACH;AAED;;;;;;AAIFC,EAAAA,OAAO,CAACC,WAAD,EAAc;AACnB,QAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAKC,YAAL,GAAoBD,WAApB,CADwB,CACS;;AACjC,WAAKE,QAAL,GAAgBF,WAAW,CAACG,SAA5B,CAFwB,CAEe;;AACvC,WAAKC,QAAL,GAAgBC,eAAe,CAACC,YAAhC,CAHwB,CAGsB;;AAC9CN,MAAAA,WAAW,CAACG,SAAZ,GAAwB,KAAKC,QAA7B,CAJwB,CAIe;AAEvC;AACA;;AACA,UAAI,KAAKG,cAAT,EAAyB,KAAKT,WAAL,CAAiBU,iBAAjB,CAAmC,IAAnC;AAC1B;AACF;;AApB4D","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class CreateCommandObject extends CommandObject {\n    constructor(undoHandler) {\n        super(undoHandler, true);\n    }\n\n    /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute(selectedObj) {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // global variable for selected\n      this.oldValue = selectedObj.fillColor; // object's current color\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n      selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}