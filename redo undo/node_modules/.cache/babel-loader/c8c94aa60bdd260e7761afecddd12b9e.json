{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\"; // import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      finalBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      oldBorderWidth: defaultValues.borderWidth,\n      orginalMovePosition: {},\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      redoCommandList: [],\n      currCommand: -1,\n      undoButton: false\n    };\n\n    this.registerExecution = commandObject => {\n      console.log(commandObject); //  this.state.commandList.push(commandObject)\n\n      if (commandObject.execute()) {\n        this.state.commandList.push(commandObject);\n      }\n    };\n\n    this.undo = () => {\n      console.log(\"enter undo\");\n\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        console.log(commandObject);\n        this.state.redoCommandList.push(commandObject);\n        this.state.currCommand = commandObject;\n\n        if (commandObject != null) {\n          commandObject.undo();\n          let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n          this.state.selectedShapeId = selectedShapeId;\n        }\n\n        console.log(this.state.commandList);\n\n        if (this.state.commandList.length == 0) {\n          this.state.undoButton = true;\n        }\n\n        console.log(this.state.undoButton);\n      } else {// UndoRedo.greyUndo()\n      }\n    };\n\n    this.redo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        // UndoRedo.unGreyRedo()\n        var commandObject = this.state.redoCommandList.pop();\n        this.state.commandList.push(commandObject);\n        commandObject.redo();\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n        this.state.selectedShapeId = selectedShapeId;\n      } else {// UndoRedo.greyRedo()\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.addShape = shapeData => {\n      const id = genId();\n      let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.deleteHelper = id => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[id].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.undoDeleteHelper = id => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[id].visible = true;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.deleteSelectedShape = () => {\n      console.log(\"enter delete selected shape\");\n      let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n\n      console.log(this.state.commandList);\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      // console.log(newData)\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      let oldColor = this.getCurrentObject().borderColor;\n      let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getBorderWidthBeforeMove = widthBefore => {\n      this.state.oldBorderWidth = widthBefore;\n    };\n\n    this.getFinalBorderWidth = borderWidth => {\n      let oldWidth = this.state.oldBorderWidth;\n      let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.moveShapeDown = targetId => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[targetId];\n      let init = targetShape.initCoords;\n      let final = targetShape.finalCoords;\n      let origin = {\n        initCoords: init,\n        finalCoords: final\n      };\n      console.log(origin);\n      this.state.orginalMovePosition = origin;\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.moveShapeUp = newData => {\n      let cmdObject = new MoveCommandObject(this.undoHandler, this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      let oldColor = this.getCurrentObject().fillColor;\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.setState = this.setState.bind(this);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      deleteHelper: this.deleteHelper,\n      undoDeleteHelper: this.undoDeleteHelper,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  //Grey out the undo button\n  grayUndo() {}\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoButton\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        getFinalBorderWidth: this.getFinalBorderWidth,\n        getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        moveShapeDown: this.moveShapeDown,\n        moveShapeUp: this.moveShapeUp,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo,\n        undoButton: this.undoButton\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderWidthCommandObject","ChangeBorderColorCommandObject","MoveCommandObject","CreateCommandObject","DeleteCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","finalBorderWidth","currFillColor","fillColor","oldBorderWidth","orginalMovePosition","shapes","shapesMap","selectedShapeId","undefined","commandList","redoCommandList","currCommand","undoButton","registerExecution","commandObject","console","log","execute","push","undo","length","pop","getCurrentSelectedShapeId","redo","getCurrentObject","addShape","shapeData","id","cmdObject","undoHandler","deleteHelper","visible","setState","undoDeleteHelper","deleteSelectedShape","updateShape","shapeId","newData","targetShape","changeCurrMode","changeCurrBorderColor","oldColor","changeCurrBorderWidth","getBorderWidthBeforeMove","widthBefore","getFinalBorderWidth","oldWidth","moveShapeDown","targetId","init","initCoords","final","finalCoords","origin","moveShape","moveShapeUp","changeCurrFillColor","bind","grayUndo","render","selectShape","filter"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n// import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    finalBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    oldBorderWidth: defaultValues.borderWidth,\n    orginalMovePosition: {},\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    redoCommandList: [],\n    currCommand: -1,\n    undoButton: false,\n  };\n\n  constructor() {\n    super();\n    this.setState = this.setState.bind(this); \n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      deleteHelper: this.deleteHelper,\n      undoDeleteHelper: this.undoDeleteHelper,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n   console.log(commandObject)\n  //  this.state.commandList.push(commandObject)\n    if(commandObject.execute()) {\n      this.state.commandList.push(commandObject)\n    }  \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(\"enter undo\")\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      \n      console.log(commandObject)\n      this.state.redoCommandList.push(commandObject)\n      this.state.currCommand = commandObject\n\n      if(commandObject != null) {\n        commandObject.undo()\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n        this.state.selectedShapeId = selectedShapeId\n      } \n\n      console.log(this.state.commandList)\n      if(this.state.commandList.length == 0) {\n        this.state.undoButton = true\n      }\n      console.log(this.state.undoButton)\n\n    } else {\n      // UndoRedo.greyUndo()\n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    if(this.state.redoCommandList.length !== 0) {\n      // UndoRedo.unGreyRedo()\n      var commandObject = this.state.redoCommandList.pop()\n      this.state.commandList.push(commandObject)\n      commandObject.redo()\n      let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n      this.state.selectedShapeId = selectedShapeId\n    }else{\n      // UndoRedo.greyRedo()\n    }\n  };\n\n  //A helper function to get the current Object being selected. \n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    const id = genId();\n    let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //A helper function to reverse create, that is to make the created object become invisible.\n  deleteHelper = (id) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[id].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  }\n\n  //A helper function to reverse delete of a create object, that is to make the created object visible again.\n  undoDeleteHelper = (id) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[id].visible = true;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  }\n\n   // deleting a shape sets its visibility to false, rather than removing it\n   deleteSelectedShape = () => {\n    console.log(\"enter delete selected shape\")\n  \n    let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n    console.log(this.state.commandList)\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    // console.log(newData)\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  //Chnage the mode of the palette\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  //Change the selected object's border color\n  changeCurrBorderColor = (borderColor) => {\n    let oldColor = this.getCurrentObject().borderColor;\n    let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Set the border width of the selected object when moving the slider of border width\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  //Get the border width of the selected object before the slider is moved\n  getBorderWidthBeforeMove = (widthBefore) =>{\n    this.state.oldBorderWidth = widthBefore\n  }\n\n  //Get the border width of the selected object after mouse up from the slider\n  getFinalBorderWidth = (borderWidth) => {\n    let oldWidth = this.state.oldBorderWidth\n    let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Get the selected object's original position when mouse down on the object\n  moveShapeDown = (targetId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[targetId];\n    let init = targetShape.initCoords\n    let final = targetShape.finalCoords\n    let origin ={initCoords: init, finalCoords:final}\n    console.log(origin)\n    this.state.orginalMovePosition = origin\n  }\n\n  //Update the position of the selected object when the objected is being moved\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n  \n  //When moving a shape and the mouse up, trigger this event to create only one object in one movement\n  moveShapeUp = (newData) => {\n    let cmdObject = new MoveCommandObject(this.undoHandler,this.state.orginalMovePosition, newData, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Change the current fill color of the selected object\n  changeCurrFillColor = (fillColor) => {    \n    let oldColor = this.getCurrentObject().fillColor\n    let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  //Grey out the undo button\n  grayUndo() {\n\n  }\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoButton,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            getFinalBorderWidth: this.getFinalBorderWidth,\n            getBorderWidthBeforeMove: this.getBorderWidthBeforeMove,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            moveShapeDown: this.moveShapeDown,\n            moveShapeUp: this.moveShapeUp,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n            undoButton: this.undoButton,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}