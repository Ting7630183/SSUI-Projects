{"ast":null,"code":"import CommandObject from \"./CommandObject\"; //let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id);\n\nexport default class CreateCommandObject extends CommandObject {\n  constructor(undoHandler, shapeData, shapes, shapesMap, id) {\n    super(undoHandler, true);\n    this.shapeData = shapeData;\n    this.shapes = shapes;\n    this.shapesMap = shapesMap;\n    this.id = id;\n    this.setState = undoHandler.setState;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    let shapes = [...this.shapes];\n    let shapesMap = { ...this.shapesMap\n    };\n    let shapeData = this.shapeData;\n    const id = this.id;\n    shapesMap[id] = { ...shapeData,\n      id\n    };\n    shapes.push(id);\n    this.setState({\n      shapes: shapes,\n      shapesMap: shapesMap,\n      selectedShapeId: id\n    });\n    this.shapesMap = shapesMap;\n    this.shapes = shapes;\n    return true;\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    console.log(\"enter undo\");\n    let shapesMap = { ...this.shapesMap\n    };\n    console.log(this.id);\n    console.log(shapesMap[this.id]);\n    shapesMap[this.id].visible = false;\n    this.shapesMap = shapesMap;\n    this.setState({\n      shapesMap: shapesMap,\n      selectedShapeId: undefined\n    }); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    let shapesMap = { ...this.shapesMap\n    };\n    console.log(this.id);\n    console.log(shapesMap[this.id]);\n    shapesMap[this.id].visible = true;\n    this.setState({\n      shapesMap,\n      selectedShapeId: undefined\n    }); // maybe also need to fix the palette to show this object's color?\n  } // getCurrentSelectedShapeId(){\n  //   console.log(\"enter get current selected shape id\")\n  //   return this.id\n  // }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {//   return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {//   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/CreateCommandObject.js"],"names":["CommandObject","CreateCommandObject","constructor","undoHandler","shapeData","shapes","shapesMap","id","setState","execute","push","selectedShapeId","undo","console","log","visible","undefined","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B,C,CAEA;;AACA,eAAe,MAAMC,mBAAN,SAAkCD,aAAlC,CAAgD;AAC3DE,EAAAA,WAAW,CAACC,WAAD,EAAcC,SAAd,EAAyBC,MAAzB,EAAiCC,SAAjC,EAA4CC,EAA5C,EAAgD;AACzD,UAAMJ,WAAN,EAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBL,WAAW,CAACK,QAA5B;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AAEV,QAAIJ,MAAM,GAAG,CAAC,GAAG,KAAKA,MAAT,CAAb;AACA,QAAIC,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACA,QAAIF,SAAS,GAAG,KAAKA,SAArB;AACA,UAAMG,EAAE,GAAG,KAAKA,EAAhB;AACAD,IAAAA,SAAS,CAACC,EAAD,CAAT,GAAgB,EACd,GAAGH,SADW;AAEdG,MAAAA;AAFc,KAAhB;AAIAF,IAAAA,MAAM,CAACK,IAAP,CAAYH,EAAZ;AACA,SAAKC,QAAL,CAAc;AAAEH,MAAAA,MAAM,EAAEA,MAAV;AAAkBC,MAAAA,SAAS,EAAEA,SAA7B;AAAwCK,MAAAA,eAAe,EAAEJ;AAAzD,KAAd;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,WAAO,IAAP;AACC;AAED;;;;AAEAO,EAAAA,IAAI,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAIR,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,EAAjB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,SAAS,CAAC,KAAKC,EAAN,CAArB;AAEAD,IAAAA,SAAS,CAAC,KAAKC,EAAN,CAAT,CAAmBQ,OAAnB,GAA6B,KAA7B;AACA,SAAKT,SAAL,GAAiBA,SAAjB;AACA,SAAKE,QAAL,CAAc;AAAEF,MAAAA,SAAS,EAAEA,SAAb;AAAwBK,MAAAA,eAAe,EAAEK;AAAzC,KAAd,EARK,CAWL;AACD;AAED;;;;;;;AAKAC,EAAAA,IAAI,GAAG;AACL,QAAIX,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,EAAjB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,SAAS,CAAC,KAAKC,EAAN,CAArB;AAEAD,IAAAA,SAAS,CAAC,KAAKC,EAAN,CAAT,CAAmBQ,OAAnB,GAA6B,IAA7B;AACA,SAAKP,QAAL,CAAc;AAAEF,MAAAA,SAAF;AAAaK,MAAAA,eAAe,EAAEK;AAA9B,KAAd,EANK,CASL;AACD,GA9D0D,CAgE3D;AACA;AACA;AACA;;AAEA;;;;;AAGAE,EAAAA,SAAS,GAAG,CACZ;AACC;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAG,CACT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;;AA3F0D","sourcesContent":["import CommandObject from \"./CommandObject\";\n\n//let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id);\nexport default class CreateCommandObject extends CommandObject {\n    constructor(undoHandler, shapeData, shapes, shapesMap, id) {\n      super(undoHandler, true);\n      this.shapeData = shapeData\n      this.shapes = shapes\n      this.shapesMap = shapesMap\n      this.id = id\n      this.setState = undoHandler.setState\n    }\n\n    /* override to execute the action of this command.\n     * pass in false for addToUndoStack if this is a command which is NOT\n     * put on the undo stack, like Copy, or a change of selection or Save\n     */\n    execute() {\n    \n    let shapes = [...this.shapes];\n    let shapesMap = { ...this.shapesMap };\n    let shapeData = this.shapeData\n    const id = this.id;\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes: shapes, shapesMap: shapesMap, selectedShapeId: id });\n    this.shapesMap = shapesMap\n    this.shapes = shapes\n    return true; \n    }\n  \n    /* override to undo the operation of this command\n     */\n    undo() {\n      console.log(\"enter undo\")\n      let shapesMap = { ...this.shapesMap };\n      console.log(this.id)\n      console.log(shapesMap[this.id])\n      \n      shapesMap[this.id].visible = false;\n      this.shapesMap = shapesMap\n      this.setState({ shapesMap: shapesMap, selectedShapeId: undefined });    \n      \n      \n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to redo the operation of this command, which means to\n     * undo the undo. This should ONLY be called if the immediate\n     * previous operation was an Undo of this command. Anything that\n     * can be undone can be redone, so there is no need for a canRedo.\n     */\n    redo() {\n      let shapesMap = { ...this.shapesMap };\n      console.log(this.id)\n      console.log(shapesMap[this.id])\n      \n      shapesMap[this.id].visible = true;\n      this.setState({ shapesMap, selectedShapeId: undefined }); \n      \n      \n      // maybe also need to fix the palette to show this object's color?\n    }\n\n    // getCurrentSelectedShapeId(){\n    //   console.log(\"enter get current selected shape id\")\n    //   return this.id\n    // }\n  \n    /* override to return true if this operation can be repeated in the\n     * current context\n     */\n    canRepeat() {\n    //   return selectedObj !== null;\n    }\n  \n    /* override to execute the operation again, this time possibly on\n     * a new object. Thus, this typically uses the same value but a new\n     * selectedObject.\n     */\n    repeat() {\n    //   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n  \n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n    }\n  }\n\n\n\n"]},"metadata":{},"sourceType":"module"}