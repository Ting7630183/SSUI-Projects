{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler) {\n    super(undoHandler, true);\n    this.oldValue = undoHandler.oldFillColor;\n    this.newValue = undoHandler.currFillColor;\n    this.targetObject = undoHandler.targetObject;\n    this.updateShape = undoHandler.updateShape;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    if (this.targetObject !== null) {\n      this.targetObject = selectedObj;\n      this.updateShape(); // global variable for selected\n      // this.oldValue = selectedObj.fillColor; // object's current color\n      // this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n      // selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n\n    return true;\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.targetObject.fillColor = this.oldValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.targetObject.fillColor = this.newValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {\n    return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this\n      });\n    }\n  }\n\n} // export default class ChangeFillColorCommandObject extends CommandObject {\n//   constructor(undoHandler, oldColor, newColor, selectedObj) {\n//     super(undoHandler, true);\n//     this.targetObject = selectedObj;\n//     this.newValue = newColor;\n//     this.oldValue = oldColor\n//   }\n//   /* override to execute the action of this command.\n//    * pass in false for addToUndoStack if this is a command which is NOT\n//    * put on the undo stack, like Copy, or a change of selection or Save\n//    */\n//   execute() {\n//     if (this.targetObject !== null) {\n//       this.targetObject = selectedObj; // global variable for selected\n//       this.oldValue = selectedObj.fillColor; // object's current color\n//       this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n//       selectedObj.fillColor = this.newValue; // actually change\n//       // Note that this command object must be a NEW command object so it can be\n//       // registered to put it onto the stack\n//       if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n//     }\n//   }\n//   /* override to undo the operation of this command\n//    */\n//   undo() {\n//     this.targetObject.fillColor = this.oldValue;\n//     // maybe also need to fix the palette to show this object's color?\n//   }\n//   /* override to redo the operation of this command, which means to\n//    * undo the undo. This should ONLY be called if the immediate\n//    * previous operation was an Undo of this command. Anything that\n//    * can be undone can be redone, so there is no need for a canRedo.\n//    */\n//   redo() {\n//     this.targetObject.fillColor = this.newValue;\n//     // maybe also need to fix the palette to show this object's color?\n//   }\n//   /* override to return true if this operation can be repeated in the\n//    * current context\n//    */\n//   canRepeat() {\n//     return selectedObj !== null;\n//   }\n//   /* override to execute the operation again, this time possibly on\n//    * a new object. Thus, this typically uses the same value but a new\n//    * selectedObject.\n//    */\n//   repeat() {\n//     if (selectedObj !== null) {\n//       this.targetObject = selectedObj; // get new selected obj\n//       this.oldValue = selectedObj.fillColor; // object's current color\n//       // no change to newValue since reusing the same color\n//       selectedObj.fillColor = this.newValue; // actually change\n//       // Note that this command object must be a NEW command object so it can be\n//       // registered to put it onto the stack\n//       if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/ChangeFillColorCommandObject.js"],"names":["CommandObject","ChangeFillColorCommandObject","constructor","undoHandler","oldValue","oldFillColor","newValue","currFillColor","targetObject","updateShape","execute","selectedObj","addToUndoStack","registerExecution","undo","fillColor","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,4BAAN,SAA2CD,aAA3C,CAAyD;AACpEE,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,UAAMA,WAAN,EAAmB,IAAnB;AACA,SAAKC,QAAL,GAAgBD,WAAW,CAACE,YAA5B;AACA,SAAKC,QAAL,GAAgBH,WAAW,CAACI,aAA5B;AACA,SAAKC,YAAL,GAAoBL,WAAW,CAACK,YAAhC;AACA,SAAKC,WAAL,GAAmBN,WAAW,CAACM,WAA/B;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKF,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,WAAKA,YAAL,GAAoBG,WAApB;AACA,WAAKF,WAAL,GAF8B,CAG9B;AACA;AACA;AACA;AAEA;AACA;;AACA,UAAI,KAAKG,cAAT,EAAyB,KAAKT,WAAL,CAAiBU,iBAAjB,CAAmC,IAAnC;AAC1B;;AACD,WAAO,IAAP;AACD;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACL,SAAKN,YAAL,CAAkBO,SAAlB,GAA8B,KAAKX,QAAnC,CADK,CAEL;AACD;AAED;;;;;;;AAKAY,EAAAA,IAAI,GAAG;AACL,SAAKR,YAAL,CAAkBO,SAAlB,GAA8B,KAAKT,QAAnC,CADK,CAEL;AACD;AAED;;;;;AAGAW,EAAAA,SAAS,GAAG;AACV,WAAON,WAAW,KAAK,IAAvB;AACD;AAED;;;;;;AAIAO,EAAAA,MAAM,GAAG;AACP,QAAIP,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAKH,YAAL,GAAoBG,WAApB,CADwB,CACS;;AACjC,WAAKP,QAAL,GAAgBO,WAAW,CAACI,SAA5B,CAFwB,CAEe;AACvC;;AACAJ,MAAAA,WAAW,CAACI,SAAZ,GAAwB,KAAKT,QAA7B,CAJwB,CAIe;AAEvC;AACA;;AACA,UAAI,KAAKM,cAAT,EAAyB,KAAKT,WAAL,CAAiBU,iBAAjB,CAAmC,EAAE,GAAG;AAAL,OAAnC;AAC1B;AACF;;AApEmE,C,CAwExE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class ChangeFillColorCommandObject extends CommandObject {\n    constructor(undoHandler) {\n      super(undoHandler, true);\n      this.oldValue = undoHandler.oldFillColor;\n      this.newValue = undoHandler.currFillColor;\n      this.targetObject = undoHandler.targetObject;\n      this.updateShape = undoHandler.updateShape\n    }\n  \n    /* override to execute the action of this command.\n     * pass in false for addToUndoStack if this is a command which is NOT\n     * put on the undo stack, like Copy, or a change of selection or Save\n     */\n    execute() {\n      if (this.targetObject !== null) {\n        this.targetObject = selectedObj; \n        this.updateShape()\n        // global variable for selected\n        // this.oldValue = selectedObj.fillColor; // object's current color\n        // this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n        // selectedObj.fillColor = this.newValue; // actually change\n  \n        // Note that this command object must be a NEW command object so it can be\n        // registered to put it onto the stack\n        if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n      }\n      return true;\n    }\n  \n    /* override to undo the operation of this command\n     */\n    undo() {\n      this.targetObject.fillColor = this.oldValue;\n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to redo the operation of this command, which means to\n     * undo the undo. This should ONLY be called if the immediate\n     * previous operation was an Undo of this command. Anything that\n     * can be undone can be redone, so there is no need for a canRedo.\n     */\n    redo() {\n      this.targetObject.fillColor = this.newValue;\n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to return true if this operation can be repeated in the\n     * current context\n     */\n    canRepeat() {\n      return selectedObj !== null;\n    }\n  \n    /* override to execute the operation again, this time possibly on\n     * a new object. Thus, this typically uses the same value but a new\n     * selectedObject.\n     */\n    repeat() {\n      if (selectedObj !== null) {\n        this.targetObject = selectedObj; // get new selected obj\n        this.oldValue = selectedObj.fillColor; // object's current color\n        // no change to newValue since reusing the same color\n        selectedObj.fillColor = this.newValue; // actually change\n  \n        // Note that this command object must be a NEW command object so it can be\n        // registered to put it onto the stack\n        if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n      }\n    }\n  }\n\n\n// export default class ChangeFillColorCommandObject extends CommandObject {\n//   constructor(undoHandler, oldColor, newColor, selectedObj) {\n//     super(undoHandler, true);\n//     this.targetObject = selectedObj;\n//     this.newValue = newColor;\n//     this.oldValue = oldColor\n//   }\n\n//   /* override to execute the action of this command.\n//    * pass in false for addToUndoStack if this is a command which is NOT\n//    * put on the undo stack, like Copy, or a change of selection or Save\n//    */\n//   execute() {\n//     if (this.targetObject !== null) {\n//       this.targetObject = selectedObj; // global variable for selected\n//       this.oldValue = selectedObj.fillColor; // object's current color\n//       this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n//       selectedObj.fillColor = this.newValue; // actually change\n\n//       // Note that this command object must be a NEW command object so it can be\n//       // registered to put it onto the stack\n//       if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n//     }\n//   }\n\n//   /* override to undo the operation of this command\n//    */\n//   undo() {\n//     this.targetObject.fillColor = this.oldValue;\n//     // maybe also need to fix the palette to show this object's color?\n//   }\n\n//   /* override to redo the operation of this command, which means to\n//    * undo the undo. This should ONLY be called if the immediate\n//    * previous operation was an Undo of this command. Anything that\n//    * can be undone can be redone, so there is no need for a canRedo.\n//    */\n//   redo() {\n//     this.targetObject.fillColor = this.newValue;\n//     // maybe also need to fix the palette to show this object's color?\n//   }\n\n//   /* override to return true if this operation can be repeated in the\n//    * current context\n//    */\n//   canRepeat() {\n//     return selectedObj !== null;\n//   }\n\n//   /* override to execute the operation again, this time possibly on\n//    * a new object. Thus, this typically uses the same value but a new\n//    * selectedObject.\n//    */\n//   repeat() {\n//     if (selectedObj !== null) {\n//       this.targetObject = selectedObj; // get new selected obj\n//       this.oldValue = selectedObj.fillColor; // object's current color\n//       // no change to newValue since reusing the same color\n//       selectedObj.fillColor = this.newValue; // actually change\n\n//       // Note that this command object must be a NEW command object so it can be\n//       // registered to put it onto the stack\n//       if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n//     }\n//   }\n// }"]},"metadata":{},"sourceType":"module"}