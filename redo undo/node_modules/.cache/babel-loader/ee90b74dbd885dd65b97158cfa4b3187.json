{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\"; // import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      // oldFillColor:undefined,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      redoCommandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      console.log(commandObject); //  this.state.commandList.push(commandObject)\n\n      if (commandObject.execute()) {\n        this.state.commandList.push(commandObject);\n      }\n    };\n\n    this.undo = () => {\n      console.log(this.state.commandList);\n\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        this.state.redoCommandList.push(commandObject);\n        this.state.currCommand = commandObject;\n        console.log(this.state.currCommand);\n        console.log(commandObject);\n\n        if (commandObject != null) {\n          commandObject.undo();\n        }\n      } else {// UndoRedo.greyUndo()\n      }\n    };\n\n    this.redo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        // UndoRedo.unGreyRedo()\n        var commandObject = this.state.redoCommandList.pop();\n        this.state.commandList.push(commandObject);\n        commandObject.redo();\n      } else {// UndoRedo.greyRedo()\n      }\n\n      console.log(\"redo....\");\n    };\n\n    this.addShape = shapeData => {\n      console.log(\"enter create\");\n      console.log(shapeData);\n      const id = genId();\n      console.log(id);\n      let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      } // let shapes = [...this.state.shapes];\n      // let shapesMap = { ...this.state.shapesMap };\n      // shapesMap[id] = {\n      //   ...shapeData,\n      //   id,\n      // };\n      // shapes.push(id);\n      // this.setState({ shapes, shapesMap, selectedShapeId: id });\n\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.moveShape = newData => {\n      console.log(\"enter move\");\n      console.log(newData);\n      let cmdObject = new MoveCommandObject(this.undoHandler, newData, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      } // if (this.state.selectedShapeId) {\n      //   this.updateShape(this.state.selectedShapeId, newData);\n      // }\n\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      console.log(\"enter change border color\");\n      this.setState({\n        currBorderColor: borderColor\n      });\n      let oldColor = this.getCurrentObject().borderColor;\n      let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n      let oldWidth = this.getCurrentObject().borderWidth;\n      let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      this.setState({\n        currFillColor: fillColor\n      });\n      console.log(this.state.currFillColor);\n      let oldColor = this.getCurrentObject().fillColor;\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    console.log(this.state);\n    console.log(this.state.currFillColor);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor // oldFillColor: this.state.oldFillColor,\n      // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  setStateHelper(obj) {\n    this.setState(obj);\n  } // add the shapeId to the array, and the shape itself to the map\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderWidthCommandObject","ChangeBorderColorCommandObject","MoveCommandObject","CreateCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","redoCommandList","currCommand","registerExecution","commandObject","console","log","execute","push","undo","length","pop","redo","addShape","shapeData","id","cmdObject","undoHandler","updateShape","shapeId","newData","targetShape","setState","moveShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","oldColor","getCurrentObject","changeCurrBorderWidth","oldWidth","changeCurrFillColor","setStateHelper","obj","render","selectShape","filter"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n// import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    // oldFillColor:undefined,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    redoCommandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n    console.log(this.state)\n    console.log(this.state.currFillColor)\n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      // oldFillColor: this.state.oldFillColor,\n      // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n   console.log(commandObject)\n  //  this.state.commandList.push(commandObject)\n    if(commandObject.execute()) {\n      this.state.commandList.push(commandObject)\n    }  \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(this.state.commandList)\n    if(this.state.commandList.length !== 0) {\n       var commandObject = this.state.commandList.pop()\n      this.state.redoCommandList.push(commandObject)\n      this.state.currCommand = commandObject\n      console.log(this.state.currCommand)\n\n      console.log(commandObject)\n      if(commandObject != null) {\n        commandObject.undo()\n      } \n    } else {\n      // UndoRedo.greyUndo()\n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    if(this.state.redoCommandList.length !== 0) {\n      // UndoRedo.unGreyRedo()\n      var commandObject = this.state.redoCommandList.pop()\n      this.state.commandList.push(commandObject)\n      commandObject.redo()\n    }else{\n      // UndoRedo.greyRedo()\n    }\n    \n    console.log(\"redo....\");\n  };\n\n  setStateHelper(obj) {\n    this.setState(obj)\n  }\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    console.log(\"enter create\")\n    console.log(shapeData)\n    const id = genId();\n    console.log(id)\n    \n\n    let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n\n    // let shapes = [...this.state.shapes];\n    // let shapesMap = { ...this.state.shapesMap };\n    \n    // shapesMap[id] = {\n    //   ...shapeData,\n    //   id,\n    // };\n    // shapes.push(id);\n    // this.setState({ shapes, shapesMap, selectedShapeId: id });\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    console.log(\"enter move\")\n    console.log(newData)\n\n    let cmdObject = new MoveCommandObject(this.undoHandler,newData, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n\n    // if (this.state.selectedShapeId) {\n    //   this.updateShape(this.state.selectedShapeId, newData);\n    // }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    console.log(\"enter change border color\")\n    this.setState({ currBorderColor: borderColor });\n\n    let oldColor = this.getCurrentObject().borderColor;\n    let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n  \n    let oldWidth = this.getCurrentObject().borderWidth;\n    let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  }\n\n  changeCurrFillColor = (fillColor) => {\n    this.setState({ currFillColor: fillColor });\n    console.log(this.state.currFillColor)\n    \n    let oldColor = this.getCurrentObject().fillColor\n    let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}