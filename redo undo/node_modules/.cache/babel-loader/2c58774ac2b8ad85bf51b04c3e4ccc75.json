{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class MoveCommandObject extends CommandObject {\n  constructor(undoHandler, orginalMovePosition, newData, selectedShapeId) {\n    super(undoHandler, true);\n    this.origin = orginalMovePosition;\n    this.final = newData;\n    this.selectedShapeId = selectedShapeId;\n    this.newData = newData;\n    this.updateShape = undoHandler.updateShape;\n    this.setModeToSelect = undoHandler.setModeToSelect;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    this.updateShape(this.selectedShapeId, this.newData);\n    return true;\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.updateShape(this.selectedShapeId, this.origin);\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.updateShape(this.selectedShapeId, this.newData);\n  }\n\n  getCurrentSelectedShapeId() {\n    return this.selectedShapeId;\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {//   return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {//   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/MoveCommandObject.js"],"names":["CommandObject","MoveCommandObject","constructor","undoHandler","orginalMovePosition","newData","selectedShapeId","origin","final","updateShape","setModeToSelect","execute","undo","redo","getCurrentSelectedShapeId","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,aAAhC,CAA8C;AACzDE,EAAAA,WAAW,CAACC,WAAD,EAAcC,mBAAd,EAAmCC,OAAnC,EAA4CC,eAA5C,EAA6D;AACtE,UAAMH,WAAN,EAAmB,IAAnB;AACA,SAAKI,MAAL,GAAcH,mBAAd;AACA,SAAKI,KAAL,GAAaH,OAAb;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKI,WAAL,GAAmBN,WAAW,CAACM,WAA/B;AACA,SAAKC,eAAL,GAAuBP,WAAW,CAACO,eAAnC;AACD;AAED;;;;;;AAKAC,EAAAA,OAAO,GAAG;AACN,SAAKF,WAAL,CAAiB,KAAKH,eAAtB,EAAuC,KAAKD,OAA5C;AACA,WAAO,IAAP;AACH;AAED;;;;AAEAO,EAAAA,IAAI,GAAG;AACL,SAAKH,WAAL,CAAiB,KAAKH,eAAtB,EAAuC,KAAKC,MAA5C;AACD;AAED;;;;;;;AAKAM,EAAAA,IAAI,GAAG;AACH,SAAKJ,WAAL,CAAiB,KAAKH,eAAtB,EAAuC,KAAKD,OAA5C;AACH;;AAEDS,EAAAA,yBAAyB,GAAE;AACzB,WAAO,KAAKR,eAAZ;AACD;AAED;;;;;AAGAS,EAAAA,SAAS,GAAG,CACZ;AACC;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAG,CACT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;;AA9DwD","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class MoveCommandObject extends CommandObject {\n    constructor(undoHandler, orginalMovePosition, newData, selectedShapeId) {\n      super(undoHandler, true);\n      this.origin = orginalMovePosition\n      this.final = newData\n      this.selectedShapeId = selectedShapeId\n      this.newData = newData\n      this.updateShape = undoHandler.updateShape;\n      this.setModeToSelect = undoHandler.setModeToSelect\n    }\n  \n    /* override to execute the action of this command.\n     * pass in false for addToUndoStack if this is a command which is NOT\n     * put on the undo stack, like Copy, or a change of selection or Save\n     */\n  \n    execute() {\n        this.updateShape(this.selectedShapeId, this.newData)\n        return true; \n    }\n  \n    /* override to undo the operation of this command\n     */\n    undo() {\n      this.updateShape(this.selectedShapeId, this.origin)\n    }\n  \n    /* override to redo the operation of this command, which means to\n     * undo the undo. This should ONLY be called if the immediate\n     * previous operation was an Undo of this command. Anything that\n     * can be undone can be redone, so there is no need for a canRedo.\n     */\n    redo() {\n        this.updateShape(this.selectedShapeId, this.newData)\n    }\n\n    getCurrentSelectedShapeId(){\n      return this.selectedShapeId\n    }\n  \n    /* override to return true if this operation can be repeated in the\n     * current context\n     */\n    canRepeat() {\n    //   return selectedObj !== null;\n    }\n  \n    /* override to execute the operation again, this time possibly on\n     * a new object. Thus, this typically uses the same value but a new\n     * selectedObject.\n     */\n    repeat() {\n    //   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n  \n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}