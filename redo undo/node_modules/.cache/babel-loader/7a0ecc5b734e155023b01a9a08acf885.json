{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, selectedObj) {\n    super(undoHandler, true);\n    this.selectedObj = selectedObj;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    if (this.selectedObj !== null) {\n      this.targetObject = this.selectedObj; // global variable for selected\n\n      this.oldValue = this.selectedObj.fillColor; // object's current color\n\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n\n      this.selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.targetObject.fillColor = this.oldValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.targetObject.fillColor = this.newValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {\n    return this.selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {\n    if (this.selectedObj !== null) {\n      this.targetObject = this.selectedObj; // get new selected obj\n\n      this.oldValue = this.selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n\n      this.selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/ChangeFillColorCommandObject.js"],"names":["CommandObject","ChangeFillColorCommandObject","constructor","undoHandler","selectedObj","execute","targetObject","oldValue","fillColor","newValue","fillColorWidget","currentColor","addToUndoStack","registerExecution","undo","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,4BAAN,SAA2CD,aAA3C,CAAyD;AACtEE,EAAAA,WAAW,CAACC,WAAD,EAAcC,WAAd,EAA2B;AACpC,UAAMD,WAAN,EAAmB,IAAnB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKD,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,WAAKE,YAAL,GAAoB,KAAKF,WAAzB,CAD6B,CACS;;AACtC,WAAKG,QAAL,GAAgB,KAAKH,WAAL,CAAiBI,SAAjC,CAF6B,CAEe;;AAC5C,WAAKC,QAAL,GAAgBC,eAAe,CAACC,YAAhC,CAH6B,CAGiB;;AAC9C,WAAKF,QAAL,GAAgBC,eAAe,CAACC,YAAhC,CAJ6B,CAIiB;;AAC9C,WAAKP,WAAL,CAAiBI,SAAjB,GAA6B,KAAKC,QAAlC,CAL6B,CAKe;AAE5C;AACA;;AACA,UAAI,KAAKG,cAAT,EAAyB,KAAKT,WAAL,CAAiBU,iBAAjB,CAAmC,IAAnC;AAC1B;AACF;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACL,SAAKR,YAAL,CAAkBE,SAAlB,GAA8B,KAAKD,QAAnC,CADK,CAEL;AACD;AAED;;;;;;;AAKAQ,EAAAA,IAAI,GAAG;AACL,SAAKT,YAAL,CAAkBE,SAAlB,GAA8B,KAAKC,QAAnC,CADK,CAEL;AACD;AAED;;;;;AAGAO,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKZ,WAAL,KAAqB,IAA5B;AACD;AAED;;;;;;AAIAa,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKb,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,WAAKE,YAAL,GAAoB,KAAKF,WAAzB,CAD6B,CACS;;AACtC,WAAKG,QAAL,GAAgB,KAAKH,WAAL,CAAiBI,SAAjC,CAF6B,CAEe;AAC5C;;AACA,WAAKJ,WAAL,CAAiBI,SAAjB,GAA6B,KAAKC,QAAlC,CAJ6B,CAIe;AAE5C;AACA;;AACA,UAAI,KAAKG,cAAT,EAAyB,KAAKT,WAAL,CAAiBU,iBAAjB,CAAmC,EAAE,GAAG;AAAL,OAAnC;AAC1B;AACF;;AA/DqE","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, selectedObj) {\n    super(undoHandler, true);\n    this.selectedObj = selectedObj\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {\n    if (this.selectedObj !== null) {\n      this.targetObject = this.selectedObj; // global variable for selected\n      this.oldValue = this.selectedObj.fillColor; // object's current color\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n      this.selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n\n  /* override to undo the operation of this command\n   */\n  undo() {\n    this.targetObject.fillColor = this.oldValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {\n    this.targetObject.fillColor = this.newValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n  canRepeat() {\n    return this.selectedObj !== null;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n  repeat() {\n    if (this.selectedObj !== null) {\n      this.targetObject = this.selectedObj; // get new selected obj\n      this.oldValue = this.selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n      this.selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}