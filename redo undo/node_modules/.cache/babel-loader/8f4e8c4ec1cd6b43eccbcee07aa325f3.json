{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      oldFillColor: -1,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      if (this.currentCommand !== -1) {\n        if (this.currentCommand.execute) {\n          this.state.commandList.push(commandObject);\n        }\n      }\n    };\n\n    this.undo = () => {\n      console.log(this.state.commandList);\n\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n\n        if (commandObject != null) {\n          commandObject.undo();\n        }\n      }\n    };\n\n    this.redo = () => {\n      console.log(\"redo....\");\n    };\n\n    this.addShape = shapeData => {\n      let shapes = [...this.state.shapes];\n      let shapesMap = { ...this.state.shapesMap\n      };\n      const id = genId();\n      shapesMap[id] = { ...shapeData,\n        id\n      };\n      shapes.push(id);\n      this.setState({\n        shapes,\n        shapesMap,\n        selectedShapeId: id\n      });\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      this.setState({\n        currBorderColor: borderColor\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderColor\n        });\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      let oldColor = this.getCurrentObject().fillColor;\n      console.log(oldColor);\n      console.log(fillColor);\n      this.setState({\n        oldFillColor: oldColor\n      });\n      console.log(this.state.oldFill);\n      this.setState({\n        currFillColor: fillColor\n      }); // if (this.state.selectedShapeId) {\n      //   this.updateShape(this.state.selectedShapeId, { fillColor });\n      // }\n\n      console.log(\"before creating the change fill color object\");\n      console.log(this.undoHandler);\n      new ChangeFillColorCommandObject(this.undoHandler);\n    };\n\n    console.log(this.state);\n    console.log(this.state.currFillColor);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      currFillColor: this.state.currFillColor,\n      oldFillColor: this.state.oldFillColor // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  // changeCurrFillColor = (fillColor) => {\n  //   this.setState({ currFillColor: fillColor });\n  //   var selectedObj = this.getCurrentObject()\n  //   console.log(selectedObj)\n  //   var oldColor = selectedObj.fillColor\n  //   console.log(\"old color is \" + oldColor)\n  //   console.log(\"new color is \" + fillColor)\n  //   if (this.state.selectedShapeId) {\n  //     console.log(\"update the color outside the changeFillColorObject\")\n  //     this.updateShape(this.state.selectedShapeId, { fillColor });\n  //     console.log(\"the object after updated\")\n  //     console.log(selectedObj)\n  //   }\n  //   console.log(this.undoHandler)\n  //   // let a = new ChangeFillColorCommandObject()\n  //   // let a = new ChangeFillColorCommandObject(this, oldColor, fillColor, this.state.selectedShapeId)\n  //   console.log(a)\n  //   a.execute()\n  //   // ChangeFillColorCommandObject.execute()\n  // };\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","oldFillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","currCommand","registerExecution","commandObject","currentCommand","execute","push","undo","console","log","length","pop","redo","addShape","shapeData","id","setState","moveShape","newData","updateShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","changeCurrBorderWidth","getCurrentObject","changeCurrFillColor","oldColor","oldFill","undoHandler","render","selectShape","filter","shapeId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    oldFillColor:-1,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n    console.log(this.state)\n    console.log(this.state.currFillColor)\n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n\n      registerExecution: this.registerExecution,\n      undo: this.undo,\n      updateShape: this.updateShape,\n      currFillColor: this.state.currFillColor,\n      oldFillColor: this.state.oldFillColor,\n      // targetObject: this.getCurrentObject(),\n      // shapes: this.state.shapes,\n      // shapesMap: this.state.shapesMap,\n      // selectedShapeId: this.sate.selectedShapeId,\n      // commandList: this.state.commandList,\n      // currCommand: this.state.currCommand,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n\n\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n    if(this.currentCommand !== -1) {\n      if(this.currentCommand.execute) {\n        this.state.commandList.push(commandObject)\n      }\n    } \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(this.state.commandList)\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      if(commandObject != null) {\n        commandObject.undo()\n      } \n    } \n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    console.log(\"redo....\");\n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    let shapes = [...this.state.shapes];\n    let shapesMap = { ...this.state.shapesMap };\n    const id = genId();\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes, shapesMap, selectedShapeId: id });\n  };\n\n  // get the shape by its id, and update its properties\n  // updateShape = (shapeId, newData) => {\n  //   let shapesMap = { ...this.state.shapesMap };\n  //   let targetShape = shapesMap[shapeId];\n  //   shapesMap[shapeId] = { ...targetShape, ...newData };\n  //   this.setState({ shapesMap });\n  // };\n\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    this.setState({ currBorderColor: borderColor });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderColor });\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  }\n\n  changeCurrFillColor = (fillColor) => {\n    let oldColor = this.getCurrentObject().fillColor\n    console.log(oldColor)\n    console.log(fillColor)\n    this.setState({oldFillColor: oldColor});\n    console.log(this.state.oldFill)\n    this.setState({ currFillColor: fillColor });\n    // if (this.state.selectedShapeId) {\n    //   this.updateShape(this.state.selectedShapeId, { fillColor });\n    // }\n    console.log(\"before creating the change fill color object\")\n    console.log(this.undoHandler)\n    new ChangeFillColorCommandObject(this.undoHandler);\n  };\n\n  // changeCurrFillColor = (fillColor) => {\n  //   this.setState({ currFillColor: fillColor });\n\n  //   var selectedObj = this.getCurrentObject()\n  //   console.log(selectedObj)\n  //   var oldColor = selectedObj.fillColor\n  //   console.log(\"old color is \" + oldColor)\n  //   console.log(\"new color is \" + fillColor)\n    \n  //   if (this.state.selectedShapeId) {\n  //     console.log(\"update the color outside the changeFillColorObject\")\n  //     this.updateShape(this.state.selectedShapeId, { fillColor });\n  //     console.log(\"the object after updated\")\n  //     console.log(selectedObj)\n  //   }\n   \n\n  //   console.log(this.undoHandler)\n  //   // let a = new ChangeFillColorCommandObject()\n  //   // let a = new ChangeFillColorCommandObject(this, oldColor, fillColor, this.state.selectedShapeId)\n  //   console.log(a)\n  //   a.execute()\n  //   // ChangeFillColorCommandObject.execute()\n  // };\n\n  render() {\n    \n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}