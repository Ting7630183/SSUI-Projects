{"ast":null,"code":"import CommandObject from \"./CommandObject\"; //let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id);\n\nexport default class DeleteCommandObject extends CommandObject {\n  constructor(undoHandler, shapesMap, selectedShapeId, shapes, id) {\n    super(undoHandler, true);\n    this.shapesMap = shapesMap;\n    this.setState = undoHandler.setState;\n    this.selectedShapeId = selectedShapeId;\n    this.shapes = shapes;\n    this.id = id;\n  } //TODO: create multiple objects and then undo and redo\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    let shapesMap = { ...this.shapesMap\n    };\n    shapesMap[this.selectedShapeId].visible = false;\n    this.setState({\n      shapesMap,\n      selectedShapeId: undefined\n    });\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    console.log(\"enter undo\");\n    let shapes = [...this.shapes];\n    let shapesMap = { ...this.shapesMap\n    };\n    let id = this.id;\n    let shapeData = this.shapeData;\n    shapesMap[id] = { ...shapeData,\n      id\n    };\n    shapes.push(id);\n    console.log(id);\n    this.shapesMap = shapesMap;\n    console.log(shapesMap[id]);\n    this.setState({\n      shapes,\n      shapesMap,\n      selectedShapeId: id\n    }); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    let shapesMap = { ...this.shapesMap\n    };\n    console.log(this.id);\n    console.log(shapesMap[this.id]);\n    shapesMap[this.id].visible = true;\n    this.setState({\n      shapesMap,\n      selectedShapeId: undefined\n    }); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {//   return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {//   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/DeleteCommandObject.js"],"names":["CommandObject","DeleteCommandObject","constructor","undoHandler","shapesMap","selectedShapeId","shapes","id","setState","execute","visible","undefined","undo","console","log","shapeData","push","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B,C,CAEA;;AACA,eAAe,MAAMC,mBAAN,SAAkCD,aAAlC,CAAgD;AAC3DE,EAAAA,WAAW,CAACC,WAAD,EAAcC,SAAd,EAAyBC,eAAzB,EAA0CC,MAA1C,EAAkDC,EAAlD,EAAsD;AAC/D,UAAMJ,WAAN,EAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKI,QAAL,GAAgBL,WAAW,CAACK,QAA5B;AACA,SAAKH,eAAL,GAAuBA,eAAvB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD,GAR0D,CAS3D;;AAEA;;;;;;AAKAE,EAAAA,OAAO,GAAG;AACR,QAAIL,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACAA,IAAAA,SAAS,CAAC,KAAKC,eAAN,CAAT,CAAgCK,OAAhC,GAA0C,KAA1C;AACA,SAAKF,QAAL,CAAc;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA,eAAe,EAAEM;AAA9B,KAAd;AACD;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAIR,MAAM,GAAG,CAAC,GAAG,KAAKA,MAAT,CAAb;AACA,QAAIF,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACA,QAAIG,EAAE,GAAG,KAAKA,EAAd;AACA,QAAIQ,SAAS,GAAG,KAAKA,SAArB;AAEAX,IAAAA,SAAS,CAACG,EAAD,CAAT,GAAgB,EACZ,GAAGQ,SADS;AAEZR,MAAAA;AAFY,KAAhB;AAIAD,IAAAA,MAAM,CAACU,IAAP,CAAYT,EAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACA,SAAKH,SAAL,GAAiBA,SAAjB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAS,CAACG,EAAD,CAArB;AACA,SAAKC,QAAL,CAAc;AAAEF,MAAAA,MAAF;AAAUF,MAAAA,SAAV;AAAqBC,MAAAA,eAAe,EAAEE;AAAtC,KAAd,EAfK,CAiBL;AACD;AAED;;;;;;;AAKAU,EAAAA,IAAI,GAAG;AACL,QAAIb,SAAS,GAAG,EAAE,GAAG,KAAKA;AAAV,KAAhB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,EAAjB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAS,CAAC,KAAKG,EAAN,CAArB;AAEAH,IAAAA,SAAS,CAAC,KAAKG,EAAN,CAAT,CAAmBG,OAAnB,GAA6B,IAA7B;AACA,SAAKF,QAAL,CAAc;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA,eAAe,EAAEM;AAA9B,KAAd,EANK,CASL;AACD;AAED;;;;;AAGAO,EAAAA,SAAS,GAAG,CACZ;AACC;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAG,CACT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;;AAnF0D","sourcesContent":["import CommandObject from \"./CommandObject\";\n\n//let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id);\nexport default class DeleteCommandObject extends CommandObject {\n    constructor(undoHandler, shapesMap, selectedShapeId, shapes, id) {\n      super(undoHandler, true);\n      this.shapesMap = shapesMap\n      this.setState = undoHandler.setState\n      this.selectedShapeId = selectedShapeId\n      this.shapes = shapes\n      this.id = id\n    }\n    //TODO: create multiple objects and then undo and redo\n\n    /* override to execute the action of this command.\n     * pass in false for addToUndoStack if this is a command which is NOT\n     * put on the undo stack, like Copy, or a change of selection or Save\n     */\n    \n    execute() {\n      let shapesMap = { ...this.shapesMap };\n      shapesMap[this.selectedShapeId].visible = false;\n      this.setState({ shapesMap, selectedShapeId: undefined });\n    }\n  \n    /* override to undo the operation of this command\n     */\n    undo() {\n      console.log(\"enter undo\")\n      let shapes = [...this.shapes];\n      let shapesMap = { ...this.shapesMap };\n      let id = this.id\n      let shapeData = this.shapeData\n\n      shapesMap[id] = {\n          ...shapeData,\n          id,\n      };\n      shapes.push(id);\n      console.log(id)\n      this.shapesMap = shapesMap\n      console.log(shapesMap[id])\n      this.setState({ shapes, shapesMap, selectedShapeId: id });\n      \n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to redo the operation of this command, which means to\n     * undo the undo. This should ONLY be called if the immediate\n     * previous operation was an Undo of this command. Anything that\n     * can be undone can be redone, so there is no need for a canRedo.\n     */\n    redo() {\n      let shapesMap = { ...this.shapesMap };\n      console.log(this.id)\n      console.log(shapesMap[this.id])\n      \n      shapesMap[this.id].visible = true;\n      this.setState({ shapesMap, selectedShapeId: undefined }); \n      \n      \n      // maybe also need to fix the palette to show this object's color?\n    }\n  \n    /* override to return true if this operation can be repeated in the\n     * current context\n     */\n    canRepeat() {\n    //   return selectedObj !== null;\n    }\n  \n    /* override to execute the operation again, this time possibly on\n     * a new object. Thus, this typically uses the same value but a new\n     * selectedObject.\n     */\n    repeat() {\n    //   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n  \n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n    }\n  }\n\n\n\n"]},"metadata":{},"sourceType":"module"}