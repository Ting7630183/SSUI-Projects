{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      this.state.commandList.add(commandObject);\n    };\n\n    this.undo = () => {\n      var commandObject = this.state.commandList.pop();\n      console.log(commandObject); // commandObject.undo()\n\n      console.log(\"undo....\");\n      console.log(this.state.commandList); // commandObject = commandList.pop()\n      // commandObject.undo()\n    };\n\n    this.redo = () => {\n      console.log(\"redo....\");\n    };\n\n    this.addShape = shapeData => {\n      let shapes = [...this.state.shapes];\n      let shapesMap = { ...this.state.shapesMap\n      };\n      const id = genId();\n      shapesMap[id] = { ...shapeData,\n        id\n      };\n      shapes.push(id);\n      this.setState({\n        shapes,\n        shapesMap,\n        selectedShapeId: id\n      });\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      this.setState({\n        currBorderColor: borderColor\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderColor\n        });\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];\n        ;\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      this.setState({\n        currFillColor: fillColor\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          fillColor\n        });\n      }\n\n      var selectedObj = this.getCurrentObject();\n      console.log(this.undoHandler); // const ChangeFillColorCommandObject = new ChangeFillColorCommandObject(this.undoHandler, selectedObj)\n      // console.log(ChangeFillColorCommandObject)\n      // ChangeFillColorCommandObject.execute()\n    };\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution // popExecution: this.popExecution,\n      // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","currCommand","registerExecution","commandObject","add","undo","pop","console","log","redo","addShape","shapeData","id","push","setState","updateShape","shapeId","newData","targetShape","moveShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","changeCurrBorderWidth","getCurrentObject","changeCurrFillColor","selectedObj","undoHandler","render","selectShape","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,eAArC;AAEA,OAAO,WAAP;AACA,OAAOC,4BAAP,MAAyC,sDAAzC;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAkB1BQ,EAAAA,WAAW,GAAG;AACZ;AAEA;;;;;AAHY,SAjBdC,KAiBc,GAjBN;AACN;AACAC,MAAAA,QAAQ,EAAEL,aAAa,CAACM,IAFlB;AAGNC,MAAAA,eAAe,EAAEP,aAAa,CAACQ,WAHzB;AAINC,MAAAA,eAAe,EAAET,aAAa,CAACU,WAJzB;AAKNC,MAAAA,aAAa,EAAEX,aAAa,CAACY,SALvB;AAON;AACAC,MAAAA,MAAM,EAAE,EARF;AASNC,MAAAA,SAAS,EAAE,EATL;AAUNC,MAAAA,eAAe,EAAEC,SAVX;AAYN;AACAC,MAAAA,WAAW,EAAE,EAbP;AAcNC,MAAAA,WAAW,EAAE,CAAC;AAdR,KAiBM;;AAAA,SAsBdC,iBAtBc,GAsBOC,aAAD,IAAmB;AACrC,WAAKhB,KAAL,CAAWa,WAAX,CAAuBI,GAAvB,CAA2BD,aAA3B;AACD,KAxBa;;AAAA,SAoCdE,IApCc,GAoCP,MAAM;AACX,UAAIF,aAAa,GAAG,KAAKhB,KAAL,CAAWa,WAAX,CAAuBM,GAAvB,EAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAFW,CAGX;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrB,KAAL,CAAWa,WAAvB,EALW,CAMX;AACA;AACD,KA5Ca;;AAAA,SAoDdS,IApDc,GAoDP,MAAM;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,KAtDa;;AAAA,SAyDdE,QAzDc,GAyDFC,SAAD,IAAe;AACxB,UAAIf,MAAM,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWS,MAAf,CAAb;AACA,UAAIC,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACA,YAAMe,EAAE,GAAG9B,KAAK,EAAhB;AACAe,MAAAA,SAAS,CAACe,EAAD,CAAT,GAAgB,EACd,GAAGD,SADW;AAEdC,QAAAA;AAFc,OAAhB;AAIAhB,MAAAA,MAAM,CAACiB,IAAP,CAAYD,EAAZ;AACA,WAAKE,QAAL,CAAc;AAAElB,QAAAA,MAAF;AAAUC,QAAAA,SAAV;AAAqBC,QAAAA,eAAe,EAAEc;AAAtC,OAAd;AACD,KAnEa;;AAAA,SAsEdG,WAtEc,GAsEA,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAClC,UAAIpB,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACA,UAAIqB,WAAW,GAAGrB,SAAS,CAACmB,OAAD,CAA3B;AACAnB,MAAAA,SAAS,CAACmB,OAAD,CAAT,GAAqB,EAAE,GAAGE,WAAL;AAAkB,WAAGD;AAArB,OAArB;AACA,WAAKH,QAAL,CAAc;AAAEjB,QAAAA;AAAF,OAAd;AACD,KA3Ea;;AAAA,SA6EdsB,SA7Ec,GA6EDF,OAAD,IAAa;AACvB,UAAI,KAAK9B,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKiB,WAAL,CAAiB,KAAK5B,KAAL,CAAWW,eAA5B,EAA6CmB,OAA7C;AACD;AACF,KAjFa;;AAAA,SAoFdG,mBApFc,GAoFQ,MAAM;AAC1B,UAAIvB,SAAS,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWU;AAAhB,OAAhB;AACAA,MAAAA,SAAS,CAAC,KAAKV,KAAL,CAAWW,eAAZ,CAAT,CAAsCuB,OAAtC,GAAgD,KAAhD;AACA,WAAKP,QAAL,CAAc;AAAEjB,QAAAA,SAAF;AAAaC,QAAAA,eAAe,EAAEC;AAA9B,OAAd;AACD,KAxFa;;AAAA,SA0FduB,cA1Fc,GA0FIjC,IAAD,IAAU;AACzB,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAKyB,QAAL,CAAc;AACZ1B,UAAAA,QAAQ,EAAEC,IADE;AAEZC,UAAAA,eAAe,EAAEP,aAAa,CAACQ;AAFnB,SAAd;AAID,OALD,MAKO;AACL,aAAKuB,QAAL,CAAc;AAAE1B,UAAAA,QAAQ,EAAEC;AAAZ,SAAd;AACD;AACF,KAnGa;;AAAA,SAqGdkC,qBArGc,GAqGWhC,WAAD,IAAiB;AACvC,WAAKuB,QAAL,CAAc;AAAExB,QAAAA,eAAe,EAAEC;AAAnB,OAAd;;AACA,UAAI,KAAKJ,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKiB,WAAL,CAAiB,KAAK5B,KAAL,CAAWW,eAA5B,EAA6C;AAAEP,UAAAA;AAAF,SAA7C;AACD;AACF,KA1Ga;;AAAA,SA4GdiC,qBA5Gc,GA4GW/B,WAAD,IAAiB;AACvC,WAAKqB,QAAL,CAAc;AAAEtB,QAAAA,eAAe,EAAEC;AAAnB,OAAd;;AACA,UAAI,KAAKN,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKiB,WAAL,CAAiB,KAAK5B,KAAL,CAAWW,eAA5B,EAA6C;AAAEL,UAAAA;AAAF,SAA7C;AACD;AACF,KAjHa;;AAAA,SAmHdgC,gBAnHc,GAmHK,MAAK;AACtB,UAAI,KAAKtC,KAAL,CAAWW,eAAf,EAAgC;AAC9B,eAAO,KAAKX,KAAL,CAAWU,SAAX,CAAqB,KAAKV,KAAL,CAAWW,eAAhC,CAAP;AAAwD;AACzD;AACF,KAvHa;;AAAA,SAyHd4B,mBAzHc,GAyHS/B,SAAD,IAAe;AACnC,WAAKmB,QAAL,CAAc;AAAEpB,QAAAA,aAAa,EAAEC;AAAjB,OAAd;;AACA,UAAI,KAAKR,KAAL,CAAWW,eAAf,EAAgC;AAC9B,aAAKiB,WAAL,CAAiB,KAAK5B,KAAL,CAAWW,eAA5B,EAA6C;AAAEH,UAAAA;AAAF,SAA7C;AACD;;AACD,UAAIgC,WAAW,GAAG,KAAKF,gBAAL,EAAlB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKoB,WAAjB,EANmC,CAOnC;AACA;AACA;AACD,KAnIa;;AAOZ,SAAKA,WAAL,GAAmB;AACjB1B,MAAAA,iBAAiB,EAAE,KAAKA,iBADP,CAEjB;AACA;;AAHiB,KAAnB;AAKD;AAKD;;;;;;;AAoHA2B,EAAAA,MAAM,GAAG;AAEP,UAAM;AACJzC,MAAAA,QADI;AAEJE,MAAAA,eAFI;AAGJE,MAAAA,eAHI;AAIJE,MAAAA,aAJI;AAKJE,MAAAA,MALI;AAMJC,MAAAA,SANI;AAOJC,MAAAA;AAPI,QAQF,KAAKX,KART,CAFO,CAYP;AACA;;AACA,wBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,QADK;AAELkC,QAAAA,cAAc,EAAE,KAAKA,cAFhB;AAGLhC,QAAAA,eAHK;AAILiC,QAAAA,qBAAqB,EAAE,KAAKA,qBAJvB;AAKL/B,QAAAA,eALK;AAMLgC,QAAAA,qBAAqB,EAAE,KAAKA,qBANvB;AAOL9B,QAAAA,aAPK;AAQLgC,QAAAA,mBAAmB,EAAE,KAAKA,mBARrB;AAUL9B,QAAAA,MAVK;AAWLC,QAAAA,SAXK;AAYLa,QAAAA,QAAQ,EAAE,KAAKA,QAZV;AAaLS,QAAAA,SAAS,EAAE,KAAKA,SAbX;AAcLrB,QAAAA,eAdK;AAeLgC,QAAAA,WAAW,EAAGlB,EAAD,IAAQ;AACnB,eAAKE,QAAL,CAAc;AAAEhB,YAAAA,eAAe,EAAEc;AAAnB,WAAd;;AACA,cAAIA,EAAJ,EAAQ;AACN,kBAAM;AAAErB,cAAAA,WAAF;AAAeE,cAAAA,WAAf;AAA4BE,cAAAA;AAA5B,gBAA0CE,SAAS,CACvDD,MAAM,CAACmC,MAAP,CAAef,OAAD,IAAaA,OAAO,KAAKJ,EAAvC,EAA2C,CAA3C,CADuD,CAAzD;AAGA,iBAAKE,QAAL,CAAc;AACZxB,cAAAA,eAAe,EAAEC,WADL;AAEZC,cAAAA,eAAe,EAAEC,WAFL;AAGZC,cAAAA,aAAa,EAAEC;AAHH,aAAd;AAKD;AACF,SA3BI;AA4BLyB,QAAAA,mBAAmB,EAAE,KAAKA,mBA5BrB;AA8BLf,QAAAA,IAAI,EAAE,KAAKA,IA9BN;AA+BLI,QAAAA,IAAI,EAAE,KAAKA;AA/BN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAmCE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCF,eAoCE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApCF,CADF,CADF;AA0CD;;AA/MyB;;AAkN5B,eAAexB,GAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      // popExecution: this.popExecution,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n\n\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n    this.state.commandList.add(commandObject)\n  };\n\n  // popExecution = () =>{\n  //   return this.state.commandList.pop()\n  // }\n\n  // commandList.push(commandObject)\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    var commandObject = this.state.commandList.pop()\n    console.log(commandObject)\n    // commandObject.undo()\n    console.log(\"undo....\");\n    console.log(this.state.commandList)\n    // commandObject = commandList.pop()\n    // commandObject.undo()\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    console.log(\"redo....\");\n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    let shapes = [...this.state.shapes];\n    let shapesMap = { ...this.state.shapesMap };\n    const id = genId();\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes, shapesMap, selectedShapeId: id });\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    this.setState({ currBorderColor: borderColor });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderColor });\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  getCurrentObject = () =>{\n    if (this.state.selectedShapeId) {\n      return this.state.shapesMap[this.state.selectedShapeId];;\n    }\n  }\n\n  changeCurrFillColor = (fillColor) => {\n    this.setState({ currFillColor: fillColor });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { fillColor });\n    }\n    var selectedObj = this.getCurrentObject()\n    console.log(this.undoHandler)\n    // const ChangeFillColorCommandObject = new ChangeFillColorCommandObject(this.undoHandler, selectedObj)\n    // console.log(ChangeFillColorCommandObject)\n    // ChangeFillColorCommandObject.execute()\n  };\n\n  render() {\n    \n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}