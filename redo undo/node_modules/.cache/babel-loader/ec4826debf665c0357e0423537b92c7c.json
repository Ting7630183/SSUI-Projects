{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, oldColor, newColor, selectedObj) {\n    super(undoHandler, true);\n    this.targetObject = selectedObj;\n    this.newValue = newColor;\n    this.oldValue = oldColor;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    if (this.t !== null) {\n      this.targetObject = selectedObj; // global variable for selected\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.targetObject.fillColor = this.oldValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.targetObject.fillColor = this.newValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {\n    return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/shared/commandObjects/ChangeFillColorCommandObject.js"],"names":["CommandObject","ChangeFillColorCommandObject","constructor","undoHandler","oldColor","newColor","selectedObj","targetObject","newValue","oldValue","execute","t","fillColor","fillColorWidget","currentColor","addToUndoStack","registerExecution","undo","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,4BAAN,SAA2CD,aAA3C,CAAyD;AACtEE,EAAAA,WAAW,CAACC,WAAD,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+C;AACxD,UAAMH,WAAN,EAAmB,IAAnB;AACA,SAAKI,YAAL,GAAoBD,WAApB;AACA,SAAKE,QAAL,GAAgBH,QAAhB;AACA,SAAKI,QAAL,GAAgBL,QAAhB;AACD;AAED;;;;;;AAIAM,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKC,CAAL,KAAW,IAAf,EAAqB;AACnB,WAAKJ,YAAL,GAAoBD,WAApB,CADmB,CACc;;AACjC,WAAKG,QAAL,GAAgBH,WAAW,CAACM,SAA5B,CAFmB,CAEoB;;AACvC,WAAKJ,QAAL,GAAgBK,eAAe,CAACC,YAAhC,CAHmB,CAG2B;;AAC9CR,MAAAA,WAAW,CAACM,SAAZ,GAAwB,KAAKJ,QAA7B,CAJmB,CAIoB;AAEvC;AACA;;AACA,UAAI,KAAKO,cAAT,EAAyB,KAAKZ,WAAL,CAAiBa,iBAAjB,CAAmC,IAAnC;AAC1B;AACF;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACL,SAAKV,YAAL,CAAkBK,SAAlB,GAA8B,KAAKH,QAAnC,CADK,CAEL;AACD;AAED;;;;;;;AAKAS,EAAAA,IAAI,GAAG;AACL,SAAKX,YAAL,CAAkBK,SAAlB,GAA8B,KAAKJ,QAAnC,CADK,CAEL;AACD;AAED;;;;;AAGAW,EAAAA,SAAS,GAAG;AACV,WAAOb,WAAW,KAAK,IAAvB;AACD;AAED;;;;;;AAIAc,EAAAA,MAAM,GAAG;AACP,QAAId,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAKC,YAAL,GAAoBD,WAApB,CADwB,CACS;;AACjC,WAAKG,QAAL,GAAgBH,WAAW,CAACM,SAA5B,CAFwB,CAEe;AACvC;;AACAN,MAAAA,WAAW,CAACM,SAAZ,GAAwB,KAAKJ,QAA7B,CAJwB,CAIe;AAEvC;AACA;;AACA,UAAI,KAAKO,cAAT,EAAyB,KAAKZ,WAAL,CAAiBa,iBAAjB,CAAmC,EAAE,GAAG;AAAL,OAAnC;AAC1B;AACF;;AAhEqE","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, oldColor, newColor, selectedObj) {\n    super(undoHandler, true);\n    this.targetObject = selectedObj;\n    this.newValue = newColor;\n    this.oldValue = oldColor\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {\n    if (this.t !== null) {\n      this.targetObject = selectedObj; // global variable for selected\n      this.oldValue = selectedObj.fillColor; // object's current color\n      this.newValue = fillColorWidget.currentColor; // get the color widget's current color\n      selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n  }\n\n  /* override to undo the operation of this command\n   */\n  undo() {\n    this.targetObject.fillColor = this.oldValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {\n    this.targetObject.fillColor = this.newValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n  canRepeat() {\n    return selectedObj !== null;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n      selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}