{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\"; // import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      finalBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      oldBorderWidth: defaultValues.borderWidth,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      redoCommandList: [],\n      currCommand: -1\n    };\n\n    this.registerExecution = commandObject => {\n      console.log(commandObject); //  this.state.commandList.push(commandObject)\n\n      if (commandObject.execute()) {\n        this.state.commandList.push(commandObject);\n      }\n    };\n\n    this.undo = () => {\n      console.log(this.state.commandList);\n\n      if (this.state.commandList.length !== 0) {\n        var commandObject = this.state.commandList.pop();\n        this.state.redoCommandList.push(commandObject);\n        this.state.currCommand = commandObject;\n        console.log(this.state.currCommand);\n        console.log(commandObject);\n\n        if (commandObject != null) {\n          commandObject.undo();\n          let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n          console.log(selectedShapeId);\n          this.state.selectedShapeId = selectedShapeId;\n        }\n      } else {// UndoRedo.greyUndo()\n      }\n    };\n\n    this.redo = () => {\n      if (this.state.redoCommandList.length !== 0) {\n        // UndoRedo.unGreyRedo()\n        var commandObject = this.state.redoCommandList.pop();\n        this.state.commandList.push(commandObject);\n        commandObject.redo();\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId();\n        console.log(selectedShapeId);\n        this.state.selectedShapeId = selectedShapeId;\n      } else {// UndoRedo.greyRedo()\n      }\n    };\n\n    this.addShape = shapeData => {\n      const id = genId();\n      const ids = [];\n      let cmdObject = new CreateCommandObject(this.undoHandler, shapeData, this.state.shapes, this.state.shapesMap, id, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.deleteSelectedShape = () => {\n      let id = this.getCurrentObject().id;\n      console.log(id);\n      let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes, id);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.moveShape = newData => {\n      let cmdObject = new MoveCommandObject(this.undoHandler, newData, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      let oldColor = this.getCurrentObject().borderColor;\n      let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      }); // this.setState({ oldBorderWidth: borderWidth });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.getFinalBorderWidth = borderWidth => {\n      console.log(borderWidth);\n      let oldWidth = this.state.oldBorderWidth;\n      let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.getCurrentObject = () => {\n      if (this.state.shapes.length !== 0) {\n        if (this.state.selectedShapeId) {\n          return this.state.shapesMap[this.state.selectedShapeId];\n          ;\n        }\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      let oldColor = this.getCurrentObject().fillColor;\n      let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n\n      if (cmdObject.execute()) {\n        this.state.commandList.push(cmdObject);\n      }\n    };\n\n    this.setState = this.setState.bind(this);\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        getFinalBorderWidth: this.getFinalBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christy/Desktop/Fall2022/SSUI/Homework/hw5-Ting7630183/src/App.js"],"names":["React","Component","ControlPanel","Workspace","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderWidthCommandObject","ChangeBorderColorCommandObject","MoveCommandObject","CreateCommandObject","DeleteCommandObject","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","finalBorderWidth","currFillColor","fillColor","oldBorderWidth","shapes","shapesMap","selectedShapeId","undefined","commandList","redoCommandList","currCommand","registerExecution","commandObject","console","log","execute","push","undo","length","pop","getCurrentSelectedShapeId","redo","addShape","shapeData","id","ids","cmdObject","undoHandler","deleteSelectedShape","getCurrentObject","updateShape","shapeId","newData","targetShape","setState","moveShape","changeCurrMode","changeCurrBorderColor","oldColor","changeCurrBorderWidth","getFinalBorderWidth","oldWidth","changeCurrFillColor","bind","render","selectShape","filter"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\n// import UndoRedo from \"./containers/ControlPanel/ControlPanel\"\n\nimport \"./App.css\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderWidthCommandObject from \"./shared/commandObjects/ChangeBorderWidthCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCommandObject\";\nimport MoveCommandObject from \"./shared/commandObjects/MoveCommandObject\";\nimport CreateCommandObject from \"./shared/commandObjects/CreateCommandObject\";\nimport DeleteCommandObject from \"./shared/commandObjects/DeleteCommandObject\";\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    finalBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n    oldBorderWidth: defaultValues.borderWidth,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    redoCommandList: [],\n    currCommand: -1,\n  };\n\n  constructor() {\n    super();\n    this.setState = this.setState.bind(this); \n\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      setState: this.setState,\n      currFillColor: this.state.currFillColor,\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n   console.log(commandObject)\n  //  this.state.commandList.push(commandObject)\n    if(commandObject.execute()) {\n      this.state.commandList.push(commandObject)\n    }  \n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(this.state.commandList)\n    if(this.state.commandList.length !== 0) {\n      var commandObject = this.state.commandList.pop()\n      this.state.redoCommandList.push(commandObject)\n      this.state.currCommand = commandObject\n      console.log(this.state.currCommand)\n\n      console.log(commandObject)\n      if(commandObject != null) {\n        commandObject.undo()\n        let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n        console.log(selectedShapeId)\n        this.state.selectedShapeId = selectedShapeId\n      } \n    } else {\n      // UndoRedo.greyUndo()\n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    if(this.state.redoCommandList.length !== 0) {\n      // UndoRedo.unGreyRedo()\n      var commandObject = this.state.redoCommandList.pop()\n      this.state.commandList.push(commandObject)\n      commandObject.redo()\n      let selectedShapeId = commandObject.getCurrentSelectedShapeId()\n      console.log(selectedShapeId)\n      this.state.selectedShapeId = selectedShapeId\n    }else{\n      // UndoRedo.greyRedo()\n    }\n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    const id = genId();\n    const ids = []\n    let cmdObject = new CreateCommandObject(this.undoHandler,shapeData, this.state.shapes, this.state.shapesMap, id, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n   // deleting a shape sets its visibility to false, rather than removing it\n   deleteSelectedShape = () => {\n    let id = this.getCurrentObject().id\n    console.log(id)\n\n    let cmdObject = new DeleteCommandObject(this.undoHandler, this.state.shapesMap, this.state.selectedShapeId, this.state.shapes, id);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    let cmdObject = new MoveCommandObject(this.undoHandler,newData, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n \n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    let oldColor = this.getCurrentObject().borderColor;\n    let cmdObject = new ChangeBorderColorCommandObject(this.undoHandler, oldColor, borderColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    // this.setState({ oldBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  getFinalBorderWidth = (borderWidth) => {\n    console.log(borderWidth)\n    let oldWidth = this.state.oldBorderWidth\n    let cmdObject = new ChangeBorderWidthCommandObject(this.undoHandler, oldWidth, borderWidth, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n  // getFinalBorderWidth = (finalBorderWidth) =>{\n  //   console.log(\"enter get final border width\")\n  //   console.log(finalBorderWidth)\n  //   this.state.finalBorderWidth = finalBorderWidth\n  // };\n\n  getCurrentObject = () =>{\n    if(this.state.shapes.length !== 0) {\n      if (this.state.selectedShapeId) {\n        return this.state.shapesMap[this.state.selectedShapeId];;\n      }\n    } \n  };\n\n  changeCurrFillColor = (fillColor) => {    \n    let oldColor = this.getCurrentObject().fillColor\n    let cmdObject = new ChangeFillColorCommandObject(this.undoHandler, oldColor, fillColor, this.state.selectedShapeId);\n    if(cmdObject.execute()){\n      this.state.commandList.push(cmdObject)\n    }\n  };\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            getFinalBorderWidth: this.getFinalBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}